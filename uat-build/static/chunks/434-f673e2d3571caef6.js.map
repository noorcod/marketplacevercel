{"version":3,"file":"static/chunks/434-f673e2d3571caef6.js","mappings":"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","sources":["webpack://_N_E/./node_modules/hey-listen/dist/hey-listen.es.js","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-browser.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/LazyContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/definitions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/load-features.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-constant.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/id.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/VisualElementHandler.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/clamp.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/use-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/use-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/use-render.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/render.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/config-motion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/types.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/use-dom-event.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/use-focus-gesture.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/event-info.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/use-pointer-event.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/use-hover-gesture.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/pipe.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/gestures.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/data.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/on-next-frame.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/create-render-step.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/array.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/rgba.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/hex.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/hsla.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/setters.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/ease.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/mix.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/mix-color.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/mix-complex.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/progress.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/interpolate.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/noop.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/circ.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/back.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/anticipate.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/easing.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/legacy-popmotion/keyframes.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/legacy-popmotion/find-spring.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/legacy-popmotion/spring.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/legacy-popmotion/decay.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/legacy-popmotion/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/waapi/easing.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/waapi/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/waapi/supports.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/waapi/utils/get-final-keyframe.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/waapi/create-accelerated-animation.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/delay.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/create-instant-animation.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/legacy-popmotion/inertia.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/animation.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/animations.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/distance.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/PanSession.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/drag.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/VisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/layout/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animate.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/motion.mjs","webpack://_N_E/<anon>"],"sourcesContent":["var warning = function () { };\r\nvar invariant = function () { };\r\nif (process.env.NODE_ENV !== 'production') {\r\n    warning = function (check, message) {\r\n        if (!check && typeof console !== 'undefined') {\r\n            console.warn(message);\r\n        }\r\n    };\r\n    invariant = function (check, message) {\r\n        if (!check) {\r\n            throw new Error(message);\r\n        }\r\n    };\r\n}\n\nexport { invariant, warning };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","import { createContext, useContext } from 'react';\n\nconst MotionContext = createContext({});\nfunction useVisualElementContext() {\n    return useContext(MotionContext).visualElement;\n}\n\nexport { MotionContext, useVisualElementContext };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = createContext(null);\n\nexport { PresenceContext };\n","const isBrowser = typeof document !== \"undefined\";\n\nexport { isBrowser };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","import { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","import { useContext, useRef, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useVisualElementContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const parent = useVisualElementContext();\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceId: presenceContext ? presenceContext.id : undefined,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    useIsomorphicLayoutEffect(() => {\n        visualElement && visualElement.render();\n    });\n    /**\n     * Ideally this function would always run in a useEffect.\n     *\n     * However, if we have optimised appear animations to handoff from,\n     * it needs to happen synchronously to ensure there's no flash of\n     * incorrect styles in the event of a hydration error.\n     *\n     * So if we detect a situtation where optimised appear animations\n     * are running, we use useLayoutEffect to trigger animations.\n     */\n    const useAnimateChangesEffect = window.HandoffAppearAnimations\n        ? useIsomorphicLayoutEffect\n        : useEffect;\n    useAnimateChangesEffect(() => {\n        if (visualElement && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    return visualElement;\n}\n\nexport { useVisualElement };\n","function isRefObject(ref) {\n    return (typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","function isAnimationControls(v) {\n    return typeof v === \"object\" && typeof v.start === \"function\";\n}\n\nexport { isAnimationControls };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\n\nconst variantProps = [\n    \"initial\",\n    \"animate\",\n    \"exit\",\n    \"whileHover\",\n    \"whileDrag\",\n    \"whileTap\",\n    \"whileFocus\",\n    \"whileInView\",\n];\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\nimport { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","const createDefinition = (propNames) => ({\n    isEnabled: (props) => propNames.some((name) => !!props[name]),\n});\nconst featureDefinitions = {\n    measureLayout: createDefinition([\"layout\", \"layoutId\", \"drag\"]),\n    animation: createDefinition([\n        \"animate\",\n        \"exit\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"whileFocus\",\n        \"whileDrag\",\n        \"whileInView\",\n    ]),\n    exit: createDefinition([\"exit\"]),\n    drag: createDefinition([\"drag\", \"dragControls\"]),\n    focus: createDefinition([\"whileFocus\"]),\n    hover: createDefinition([\"whileHover\", \"onHoverStart\", \"onHoverEnd\"]),\n    tap: createDefinition([\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"]),\n    pan: createDefinition([\n        \"onPan\",\n        \"onPanStart\",\n        \"onPanSessionStart\",\n        \"onPanEnd\",\n    ]),\n    inView: createDefinition([\n        \"whileInView\",\n        \"onViewportEnter\",\n        \"onViewportLeave\",\n    ]),\n};\n\nexport { featureDefinitions };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        if (key === \"projectionNodeConstructor\") {\n            featureDefinitions.projectionNodeConstructor = features[key];\n        }\n        else {\n            featureDefinitions[key].Component = features[key];\n        }\n    }\n}\n\nexport { loadFeatures };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { useConstant } from '../../utils/use-constant.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nlet id = 1;\nfunction useProjectionId() {\n    return useConstant(() => {\n        if (globalProjectionState.hasEverUpdated) {\n            return id++;\n        }\n    });\n}\n\nexport { useProjectionId };\n","import { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import React__default from 'react';\n\nclass VisualElementHandler extends React__default.Component {\n    /**\n     * Update visual element props as soon as we know this update is going to be commited.\n     */\n    getSnapshotBeforeUpdate() {\n        const { visualElement, props } = this.props;\n        if (visualElement)\n            visualElement.setProps(props);\n        return null;\n    }\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\n\nexport { VisualElementHandler };\n","import { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","import * as React from 'react';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { featureDefinitions } from './features/definitions.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { useProjectionId } from '../projection/node/id.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { VisualElementHandler } from './utils/VisualElementHandler.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { SwitchLayoutGroupContext } from '../context/SwitchLayoutGroupContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, projectionNodeConstructor, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        let features = null;\n        const context = useCreateMotionContext(props);\n        /**\n         * Create a unique projection ID for this component. If a new component is added\n         * during a layout animation we'll use this to query the DOM and hydrate its ref early, allowing\n         * us to measure it as soon as any layout effect flushes pending layout animations.\n         *\n         * Performance note: It'd be better not to have to search the DOM for these elements.\n         * For newly-entering components it could be enough to only correct treeScale, in which\n         * case we could mount in a scale-correction mode. This wouldn't be enough for\n         * shared element transitions however. Perhaps for those we could revert to a root node\n         * that gets forceRendered and layout animations are triggered on its layout effect.\n         */\n        const projectionId = isStatic ? undefined : useProjectionId();\n        /**\n         *\n         */\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            const lazyStrictMode = useContext(LazyContext).strict;\n            const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n            if (context.visualElement) {\n                features = context.visualElement.loadFeatures(\n                // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, lazyStrictMode, preloadedFeatures, projectionId, projectionNodeConstructor ||\n                    featureDefinitions.projectionNodeConstructor, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (React.createElement(VisualElementHandler, { visualElement: context.visualElement, props: configAndProps },\n            features,\n            React.createElement(MotionContext.Provider, { value: context }, useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement))));\n    }\n    const ForwardRefComponent = forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\nexport { createMotionComponent };\n","import { createMotionComponent } from '../../motion/index.mjs';\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createMotionProxy };\n","/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","const scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","/**\n * Generate a list of every possible transform key.\n */\nconst transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\",\n];\n/**\n * A quick lookup for transform props.\n */\nconst transformProps = new Set(transformPropOrder);\n\nexport { transformPropOrder, transformProps };\n","import { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","const isMotionValue = (value) => !!(value === null || value === void 0 ? void 0 : value.getVelocity);\n\nexport { isMotionValue };\n","import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\nconst sortTransformProps = (a, b) => transformPropOrder.indexOf(a) - transformPropOrder.indexOf(b);\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform({ transform, transformKeys, }, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    // Transform keys into their default order - this will determine the output order.\n    transformKeys.sort(sortTransformProps);\n    // Loop over each transform and build them into transformString\n    for (const key of transformKeys) {\n        transformString += `${translateAlias[key] || key}(${transform[key]}) `;\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","/**\n * Returns true if the provided key is a CSS variable\n */\nfunction isCSSVariable(key) {\n    return key.startsWith(\"--\");\n}\n\nexport { isCSSVariable };\n","/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nconst getValueAsType = (value, type) => {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\n\nexport { getValueAsType };\n","const clamp = (min, max, v) => Math.min(Math.max(v, min), max);\n\nexport { clamp };\n","import { clamp } from '../../../utils/clamp.mjs';\n\nconst number = {\n    test: (v) => typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v) => v,\n};\nconst alpha = {\n    ...number,\n    transform: (v) => clamp(0, 1, v),\n};\nconst scale = {\n    ...number,\n    default: 1,\n};\n\nexport { alpha, number, scale };\n","/**\n * TODO: When we move from string as a source of truth to data models\n * everything in this folder should probably be referred to as models vs types\n */\n// If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v) => Math.round(v * 100000) / 100000;\nconst floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nconst colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi;\nconst singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\nfunction isString(v) {\n    return typeof v === \"string\";\n}\n\nexport { colorRegex, floatRegex, isString, sanitize, singleColorRegex };\n","import { isString } from '../utils.mjs';\n\nconst createUnitType = (unit) => ({\n    test: (v) => isString(v) && v.endsWith(unit) && v.split(\" \").length === 1,\n    parse: parseFloat,\n    transform: (v) => `${v}${unit}`,\n});\nconst degrees = createUnitType(\"deg\");\nconst percent = createUnitType(\"%\");\nconst px = createUnitType(\"px\");\nconst vh = createUnitType(\"vh\");\nconst vw = createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v) => percent.parse(v) / 100,\n    transform: (v) => percent.transform(v * 100),\n};\n\nexport { degrees, percent, progressPercentage, px, vh, vw };\n","import { number } from '../../../value/types/numbers/index.mjs';\n\nconst int = {\n    ...number,\n    transform: Math.round,\n};\n\nexport { int };\n","import { scale, alpha } from '../../../value/types/numbers/index.mjs';\nimport { px, degrees, progressPercentage } from '../../../value/types/numbers/units.mjs';\nimport { int } from './type-int.mjs';\n\nconst numberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n\nexport { numberValueTypes };\n","import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariable } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    const { style, vars, transform, transformKeys, transformOrigin } = state;\n    transformKeys.length = 0;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariable(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = numberValueTypes[key];\n        const valueAsType = getValueAsType(value, valueType);\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            transformKeys.push(key);\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0))\n                transformIsNone = false;\n        }\n        else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        }\n        else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformKeys: [],\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return props.transformValues ? props.transformValues(style) : style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"transformValues\",\n    \"custom\",\n    \"inherit\",\n    \"onLayoutAnimationStart\",\n    \"onLayoutAnimationComplete\",\n    \"onLayoutMeasure\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] && key.startsWith(\"onDrag\"))) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\"\n        ? origin\n        : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */\nfunction calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\n\nexport { calcSVGTransformOrigin };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, options, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Treat x/y not as shortcuts but as actual attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","import { useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, projectionId, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = {\n            ...filteredProps,\n            ...visualProps,\n            ref,\n        };\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        if (projectionId) {\n            elementProps[\"data-projection-id\"] = projectionId;\n        }\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style && isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props)) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps);\n    for (const key in props) {\n        if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {\n            const targetKey = key === \"x\" || key === \"y\" ? \"attr\" + key.toUpperCase() : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { isKeyframesTarget } from '../animation/utils/is-keyframes-target.mjs';\n\nconst isCustomValue = (v) => {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v) => {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\n\nexport { isCustomValue, resolveFinalValueInKeyframes };\n","import { isCustomValue } from '../../utils/resolve-value.mjs';\nimport { isMotionValue } from './is-motion-value.mjs';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            try {\n                renderState.dimensions =\n                    typeof instance.getBBox ===\n                        \"function\"\n                        ? instance.getBBox()\n                        : instance.getBoundingClientRect();\n            }\n            catch (e) {\n                // Most likely trying to measure an unrendered element under Firefox\n                renderState.dimensions = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0,\n                };\n            }\n            buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);\n            renderSVG(instance, renderState);\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","import { isSVGComponent } from './is-svg-component.mjs';\nimport { createUseRender } from '../use-render.mjs';\nimport { svgMotionConfig } from '../../svg/config-motion.mjs';\nimport { htmlMotionConfig } from '../../html/config-motion.mjs';\n\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement, projectionNodeConstructor) {\n    const baseConfig = isSVGComponent(Component)\n        ? svgMotionConfig\n        : htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement,\n        projectionNodeConstructor,\n        Component,\n    };\n}\n\nexport { createDomMotionConfig };\n","var AnimationType;\n(function (AnimationType) {\n    AnimationType[\"Animate\"] = \"animate\";\n    AnimationType[\"Hover\"] = \"whileHover\";\n    AnimationType[\"Tap\"] = \"whileTap\";\n    AnimationType[\"Drag\"] = \"whileDrag\";\n    AnimationType[\"Focus\"] = \"whileFocus\";\n    AnimationType[\"InView\"] = \"whileInView\";\n    AnimationType[\"Exit\"] = \"exit\";\n})(AnimationType || (AnimationType = {}));\n\nexport { AnimationType };\n","import { useEffect } from 'react';\n\nfunction addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n    useEffect(() => {\n        const element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [ref, eventName, handler, options]);\n}\n\nexport { addDomEvent, useDomEvent };\n","import { AnimationType } from '../render/utils/types.mjs';\nimport { useDomEvent } from '../events/use-dom-event.mjs';\nimport { useRef, useCallback } from 'react';\n\nfunction useFocusGesture({ whileFocus, visualElement, }) {\n    const isFocusActive = useRef(false);\n    const { animationState } = visualElement;\n    const onFocus = useCallback(() => {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = visualElement.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !animationState)\n            return;\n        animationState.setActive(AnimationType.Focus, true);\n        isFocusActive.current = true;\n    }, [animationState]);\n    const onBlur = useCallback(() => {\n        if (!isFocusActive.current || !animationState)\n            return;\n        animationState.setActive(AnimationType.Focus, false);\n        isFocusActive.current = false;\n    }, [animationState]);\n    useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n    useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\n\nexport { useFocusGesture };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","import { addDomEvent, useDomEvent } from './use-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\nfunction usePointerEvent(ref, eventName, handler, options) {\n    return useDomEvent(ref, eventName, handler && addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent, usePointerEvent };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","import { AnimationType } from '../render/utils/types.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { useMemo } from 'react';\n\nfunction createHoverEvent(visualElement, isActive, applyVariants, callback) {\n    return (event, info) => {\n        if (event.type === \"touch\" || isDragActive())\n            return;\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (applyVariants && visualElement.animationState) {\n            visualElement.animationState.setActive(AnimationType.Hover, isActive);\n        }\n        callback && callback(event, info);\n    };\n}\nfunction useHoverGesture({ onHoverStart, onHoverEnd, whileHover, visualElement, }) {\n    usePointerEvent(visualElement, \"pointerenter\", useMemo(() => {\n        return onHoverStart || whileHover\n            ? createHoverEvent(visualElement, true, Boolean(whileHover), onHoverStart)\n            : undefined;\n    }, [onHoverStart, Boolean(whileHover), visualElement]), { passive: !onHoverStart });\n    usePointerEvent(visualElement, \"pointerleave\", useMemo(() => {\n        return onHoverEnd || whileHover\n            ? createHoverEvent(visualElement, false, Boolean(whileHover), onHoverEnd)\n            : undefined;\n    }, [onHoverStart, Boolean(whileHover), visualElement]), { passive: !onHoverEnd });\n}\n\nexport { useHoverGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { useEffect } from 'react';\n\nfunction useUnmountEffect(callback) {\n    return useEffect(() => () => callback(), []);\n}\n\nexport { useUnmountEffect };\n","/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nexport { pipe };\n","import { useRef, useCallback } from 'react';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { addPointerEvent, usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { AnimationType } from '../render/utils/types.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { addDomEvent, useDomEvent } from '../events/use-dom-event.mjs';\nimport { extractEventInfo } from '../events/event-info.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\n/**\n * @param handlers -\n * @internal\n */\nfunction useTapGesture({ onTap, onTapStart, onTapCancel, whileTap, visualElement, ...props }) {\n    const hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n    const isPressing = useRef(false);\n    const cancelPointerEndListeners = useRef(null);\n    /**\n     * Only set listener to passive if there are no external listeners.\n     */\n    const eventOptions = {\n        passive: !(onTapStart ||\n            onTap ||\n            onTapCancel ||\n            props[\"onPointerDown\"]),\n    };\n    function removePointerEndListener() {\n        cancelPointerEndListeners.current && cancelPointerEndListeners.current();\n        cancelPointerEndListeners.current = null;\n    }\n    function checkPointerEnd() {\n        removePointerEndListener();\n        isPressing.current = false;\n        const latestProps = visualElement.getProps();\n        if (latestProps.whileTap && visualElement.animationState) {\n            visualElement.animationState.setActive(AnimationType.Tap, false);\n        }\n        return !isDragActive();\n    }\n    function onPointerUp(event, info) {\n        var _a, _b, _c, _d;\n        if (!checkPointerEnd())\n            return;\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */\n        !isNodeOrChild(visualElement.current, event.target)\n            ? (_b = (_a = visualElement.getProps()).onTapCancel) === null || _b === void 0 ? void 0 : _b.call(_a, event, info)\n            : (_d = (_c = visualElement.getProps()).onTap) === null || _d === void 0 ? void 0 : _d.call(_c, event, info);\n    }\n    function onPointerCancel(event, info) {\n        var _a, _b;\n        if (!checkPointerEnd())\n            return;\n        (_b = (_a = visualElement.getProps()).onTapCancel) === null || _b === void 0 ? void 0 : _b.call(_a, event, info);\n    }\n    function onPointerStart(event, info) {\n        var _a;\n        const latestProps = visualElement.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (latestProps.whileTap && visualElement.animationState) {\n            visualElement.animationState.setActive(AnimationType.Tap, true);\n        }\n        (_a = latestProps.onTapStart) === null || _a === void 0 ? void 0 : _a.call(latestProps, event, info);\n    }\n    const callbackDependencies = [\n        Boolean(onTapStart),\n        Boolean(onTap),\n        Boolean(whileTap),\n        visualElement,\n    ];\n    const startPress = useCallback((event, info) => {\n        removePointerEndListener();\n        if (isPressing.current)\n            return;\n        isPressing.current = true;\n        cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp, eventOptions), addPointerEvent(window, \"pointercancel\", onPointerCancel, eventOptions));\n        onPointerStart(event, info);\n    }, callbackDependencies);\n    usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? startPress : undefined, eventOptions);\n    const startAccessiblePress = useCallback(() => {\n        const stopKeydownListener = addDomEvent(visualElement.current, \"keydown\", (event) => {\n            if (event.key !== \"Enter\" || isPressing.current)\n                return;\n            isPressing.current = true;\n            cancelPointerEndListeners.current = addDomEvent(visualElement.current, \"keyup\", () => {\n                if (event.key !== \"Enter\" || !checkPointerEnd())\n                    return;\n                fireSyntheticPointerEvent(\"up\", visualElement.getProps().onTap);\n            }, eventOptions);\n            fireSyntheticPointerEvent(\"down\", onPointerStart);\n        });\n        const stopBlurListener = addDomEvent(visualElement.current, \"blur\", () => {\n            stopKeydownListener();\n            stopBlurListener();\n            if (isPressing.current) {\n                fireSyntheticPointerEvent(\"cancel\", onPointerCancel);\n            }\n        });\n    }, callbackDependencies);\n    useDomEvent(visualElement, \"focus\", hasPressListeners ? startAccessiblePress : undefined);\n    useUnmountEffect(removePointerEndListener);\n}\n\nexport { useTapGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { useRef, useEffect } from 'react';\nimport { AnimationType } from '../../../render/utils/types.mjs';\nimport { warnOnce } from '../../../utils/warn-once.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nfunction useViewport({ visualElement, whileInView, onViewportEnter, onViewportLeave, viewport = {}, }) {\n    const state = useRef({\n        hasEnteredView: false,\n        isInView: false,\n    });\n    let shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);\n    if (viewport.once && state.current.hasEnteredView)\n        shouldObserve = false;\n    const useObserver = typeof IntersectionObserver === \"undefined\"\n        ? useMissingIntersectionObserver\n        : useIntersectionObserver;\n    useObserver(shouldObserve, state.current, visualElement, viewport);\n}\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nfunction useIntersectionObserver(shouldObserve, state, visualElement, { root, margin: rootMargin, amount = \"some\", once }) {\n    useEffect(() => {\n        if (!shouldObserve || !visualElement.current)\n            return;\n        const options = {\n            root: root === null || root === void 0 ? void 0 : root.current,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const intersectionCallback = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (state.isInView === isIntersecting)\n                return;\n            state.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && state.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                state.hasEnteredView = true;\n            }\n            if (visualElement.animationState) {\n                visualElement.animationState.setActive(AnimationType.InView, isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const props = visualElement.getProps();\n            const callback = isIntersecting\n                ? props.onViewportEnter\n                : props.onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(visualElement.current, options, intersectionCallback);\n    }, [shouldObserve, root, rootMargin, amount]);\n}\n/**\n * If IntersectionObserver is missing, we activate inView and fire onViewportEnter\n * on mount. This way, the page will be in the state the author expects users\n * to see it in for everyone.\n */\nfunction useMissingIntersectionObserver(shouldObserve, state, visualElement, { fallback = true }) {\n    useEffect(() => {\n        if (!shouldObserve || !fallback)\n            return;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, \"IntersectionObserver not available on this device. whileInView animations will trigger on mount.\");\n        }\n        /**\n         * Fire this in an rAF because, at this point, the animation state\n         * won't have flushed for the first time and there's certain logic in\n         * there that behaves differently on the initial animation.\n         *\n         * This hook should be quite rarely called so setting this in an rAF\n         * is preferred to changing the behaviour of the animation state.\n         */\n        requestAnimationFrame(() => {\n            state.hasEnteredView = true;\n            const { onViewportEnter } = visualElement.getProps();\n            onViewportEnter && onViewportEnter(null);\n            if (visualElement.animationState) {\n                visualElement.animationState.setActive(AnimationType.InView, true);\n            }\n        });\n    }, [shouldObserve]);\n}\n\nexport { useViewport };\n","const makeRenderlessComponent = (hook) => (props) => {\n    hook(props);\n    return null;\n};\n\nexport { makeRenderlessComponent };\n","import { useFocusGesture } from '../../gestures/use-focus-gesture.mjs';\nimport { useHoverGesture } from '../../gestures/use-hover-gesture.mjs';\nimport { useTapGesture } from '../../gestures/use-tap-gesture.mjs';\nimport { useViewport } from './viewport/use-viewport.mjs';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.mjs';\n\nconst gestureAnimations = {\n    inView: makeRenderlessComponent(useViewport),\n    tap: makeRenderlessComponent(useTapGesture),\n    focus: makeRenderlessComponent(useFocusGesture),\n    hover: makeRenderlessComponent(useHoverGesture),\n};\n\nexport { gestureAnimations };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    // Replace with useId when released in React\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^\\-?\\d*\\.?\\d+$/.test(v);\n\nexport { isNumericalString };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/.test(v);\n\nexport { isZeroValueString };\n","const frameData = {\n    delta: 0,\n    timestamp: 0,\n};\n\nexport { frameData };\n","/*\n  Detect and load appropriate clock setting for the execution environment\n */\nconst defaultTimestep = (1 / 60) * 1000;\nconst getCurrentTime = typeof performance !== \"undefined\"\n    ? () => performance.now()\n    : () => Date.now();\nconst onNextFrame = typeof window !== \"undefined\"\n    ? (callback) => window.requestAnimationFrame(callback)\n    : (callback) => setTimeout(() => callback(getCurrentTime()), defaultTimestep);\n\nexport { defaultTimestep, onNextFrame };\n","function createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two arrays, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let toRun = [];\n    let toRunNextFrame = [];\n    /**\n     *\n     */\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            // If the buffer doesn't already contain this callback, add it\n            if (buffer.indexOf(callback) === -1) {\n                buffer.push(callback);\n                // If we're adding it to the currently running buffer, update its measured size\n                if (addToCurrentFrame && isProcessing)\n                    numToRun = toRun.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            const index = toRunNextFrame.indexOf(callback);\n            if (index !== -1)\n                toRunNextFrame.splice(index, 1);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [toRun, toRunNextFrame] = [toRunNextFrame, toRun];\n            // Clear the next frame list\n            toRunNextFrame.length = 0;\n            // Execute this frame\n            numToRun = toRun.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = toRun[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n","import { onNextFrame, defaultTimestep } from './on-next-frame.mjs';\nimport { createRenderStep } from './create-render-step.mjs';\nimport { frameData } from './data.mjs';\n\nconst maxElapsed = 40;\nlet useDefaultElapsed = true;\nlet runNextFrame = false;\nlet isProcessing = false;\nconst stepsOrder = [\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst steps = stepsOrder.reduce((acc, key) => {\n    acc[key] = createRenderStep(() => (runNextFrame = true));\n    return acc;\n}, {});\nconst sync = stepsOrder.reduce((acc, key) => {\n    const step = steps[key];\n    acc[key] = (process, keepAlive = false, immediate = false) => {\n        if (!runNextFrame)\n            startLoop();\n        return step.schedule(process, keepAlive, immediate);\n    };\n    return acc;\n}, {});\nconst cancelSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = steps[key].cancel;\n    return acc;\n}, {});\nconst flushSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = () => steps[key].process(frameData);\n    return acc;\n}, {});\nconst processStep = (stepId) => steps[stepId].process(frameData);\nconst processFrame = (timestamp) => {\n    runNextFrame = false;\n    frameData.delta = useDefaultElapsed\n        ? defaultTimestep\n        : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1);\n    frameData.timestamp = timestamp;\n    isProcessing = true;\n    stepsOrder.forEach(processStep);\n    isProcessing = false;\n    if (runNextFrame) {\n        useDefaultElapsed = false;\n        onNextFrame(processFrame);\n    }\n};\nconst startLoop = () => {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n    if (!isProcessing)\n        onNextFrame(processFrame);\n};\n\nexport { cancelSync, flushSync, sync };\n","function addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1)\n        arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1)\n        arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\nexport { addUniqueItem, moveItem, removeItem };\n","import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n","/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nexport { velocityPerSecond };\n","import { frameData } from '../frameloop/data.mjs';\nimport { sync } from '../frameloop/index.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"9.0.1\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                sync.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.events.velocityChange) {\n                this.events.velocityChange.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                if (this.events.velocityChange) {\n                    this.events.velocityChange.notify(this.getVelocity());\n                }\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                sync.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = prev;\n        this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve) || null;\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        this.animation = null;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, motionValue };\n","import { isString, singleColorRegex, floatRegex } from '../utils.mjs';\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||\n        (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (!isString(v))\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n","import { clamp } from '../../../utils/clamp.mjs';\nimport { number, alpha } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: isColorString(\"rgb\", \"red\"),\n    parse: splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nexport { rgbUnit, rgba };\n","import { rgba } from './rgba.mjs';\nimport { isColorString } from './utils.mjs';\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n        // Or we have 3 characters, ie #F00\n    }\n    else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nexport { hex };\n","import { alpha } from '../numbers/index.mjs';\nimport { percent } from '../numbers/units.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst hsla = {\n    test: isColorString(\"hsl\", \"hue\"),\n    parse: splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return (\"hsla(\" +\n            Math.round(hue) +\n            \", \" +\n            percent.transform(sanitize(saturation)) +\n            \", \" +\n            percent.transform(sanitize(lightness)) +\n            \", \" +\n            sanitize(alpha.transform(alpha$1)) +\n            \")\");\n    },\n};\n\nexport { hsla };\n","import { isString } from '../utils.mjs';\nimport { hex } from './hex.mjs';\nimport { hsla } from './hsla.mjs';\nimport { rgba } from './rgba.mjs';\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return isString(v)\n            ? v\n            : v.hasOwnProperty(\"red\")\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nexport { color };\n","import { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\n\nconst colorToken = \"${c}\";\nconst numberToken = \"${n}\";\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nfunction analyseComplexValue(v) {\n    if (typeof v === \"number\")\n        v = `${v}`;\n    const values = [];\n    let numColors = 0;\n    let numNumbers = 0;\n    const colors = v.match(colorRegex);\n    if (colors) {\n        numColors = colors.length;\n        // Strip colors from input so they're not picked up by number regex.\n        // There's a better way to combine these regex searches, but its beyond my regex skills\n        v = v.replace(colorRegex, colorToken);\n        values.push(...colors.map(color.parse));\n    }\n    const numbers = v.match(floatRegex);\n    if (numbers) {\n        numNumbers = numbers.length;\n        v = v.replace(floatRegex, numberToken);\n        values.push(...numbers.map(number.parse));\n    }\n    return { values, numColors, numNumbers, tokenised: v };\n}\nfunction parse(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { values, numColors, tokenised } = analyseComplexValue(source);\n    const numValues = values.length;\n    return (v) => {\n        let output = tokenised;\n        for (let i = 0; i < numValues; i++) {\n            output = output.replace(i < numColors ? colorToken : numberToken, i < numColors\n                ? color.transform(v[i])\n                : sanitize(v[i]));\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parse(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = { test, parse, createTransformer, getAnimatableNone };\n\nexport { analyseComplexValue, complex };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    var _a;\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);\n}\n\nexport { getAnimatableNone };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */\nfunction getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key) => (current[key] = value.get()));\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */\nfunction getVelocity(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key) => (velocity[key] = value.getVelocity()));\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\n\nexport { resolveVariant };\n","import { isNumericalString } from '../../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.mjs';\nimport { findValueType } from '../dom/value-types/find.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        var _a;\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => {\n            setVariants(child, variantLabels);\n        });\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (let i = 0; i < numNewValues; i++) {\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" &&\n            (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value, { owner: visualElement }));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null)\n            visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    var _a;\n    const origin = {};\n    for (const key in target) {\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        origin[key] =\n            transitionOrigin !== undefined\n                ? transitionOrigin\n                : (_a = visualElement.getValue(key)) === null || _a === void 0 ? void 0 : _a.get();\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\n\nexport { secondsToMilliseconds };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst easeIn = (p) => p * p;\nconst easeOut = reverseEasing(easeIn);\nconst easeInOut = mirrorEasing(easeIn);\n\nexport { easeIn, easeInOut, easeOut };\n","/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/\nconst mix = (from, to, progress) => -progress * from + progress * to + from;\n\nexport { mix };\n","// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nexport { hslaToRgba };\n","import { mix } from './mix.mjs';\nimport { invariant } from 'hey-listen';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\nimport { hex } from '../value/types/color/hex.mjs';\nimport { rgba } from '../value/types/color/rgba.mjs';\nimport { hsla } from '../value/types/color/hsla.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n","import { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { pipe } from './pipe.mjs';\nimport { warning } from 'hey-listen';\nimport { color } from '../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../value/types/complex/index.mjs';\n\nfunction getMixer(origin, target) {\n    if (typeof origin === \"number\") {\n        return (v) => mix(origin, target, v);\n    }\n    else if (color.test(origin)) {\n        return mixColor(origin, target);\n    }\n    else {\n        return mixComplex(origin, target);\n    }\n}\nconst mixArray = (from, to) => {\n    const output = [...from];\n    const numValues = output.length;\n    const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));\n    return (v) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nconst mixObject = (origin, target) => {\n    const output = { ...origin, ...target };\n    const blendValue = {};\n    for (const key in output) {\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer(origin[key], target[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.numColors === targetStats.numColors &&\n        originStats.numNumbers >= targetStats.numNumbers;\n    if (canInterpolate) {\n        return pipe(mixArray(originStats.values, targetStats.values), template);\n    }\n    else {\n        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return (p) => `${p > 0 ? target : origin}`;\n    }\n};\n\nexport { mixArray, mixComplex, mixObject };\n","/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nexport { progress };\n","import { invariant } from 'hey-listen';\nimport { color } from '../value/types/color/index.mjs';\nimport { clamp } from './clamp.mjs';\nimport { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { mixComplex, mixArray, mixObject } from './mix-complex.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\n\nconst mixNumber = (from, to) => (p) => mix(from, to, p);\nfunction detectMixerFactory(v) {\n    if (typeof v === \"number\") {\n        return mixNumber;\n    }\n    else if (typeof v === \"string\") {\n        if (color.test(v)) {\n            return mixColor;\n        }\n        else {\n            return mixComplex;\n        }\n    }\n    else if (Array.isArray(v)) {\n        return mixArray;\n    }\n    else if (typeof v === \"object\") {\n        return mixObject;\n    }\n    return mixNumber;\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || detectMixerFactory(output[0]);\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, \"Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.\");\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n","const noop = (any) => any;\n\nexport { noop };\n","import { noop } from '../utils/noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circOut);\n\nexport { circIn, circInOut, circOut };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = reverseEasing(backOut);\nconst backInOut = mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { invariant } from 'hey-listen';\nimport { cubicBezier } from '../../easing/cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../../easing/ease.mjs';\nimport { circIn, circInOut, circOut } from '../../easing/circ.mjs';\nimport { backIn, backInOut, backOut } from '../../easing/back.mjs';\nimport { anticipate } from '../../easing/anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\nconst isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { easingDefinitionToFunction, isEasingArray };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { isEasingArray, easingDefinitionToFunction } from '../utils/easing.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction defaultOffset(values) {\n    const numValues = values.length;\n    return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);\n}\nfunction convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\nfunction keyframes({ keyframes: keyframeValues, ease = easeInOut, times, duration = 300, }) {\n    keyframeValues = [...keyframeValues];\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    function createInterpolator() {\n        return interpolate(absoluteTimes, keyframeValues, {\n            ease: Array.isArray(easingFunctions)\n                ? easingFunctions\n                : defaultEasing(keyframeValues, easingFunctions),\n        });\n    }\n    let interpolator = createInterpolator();\n    return {\n        next: (t) => {\n            state.value = interpolator(t);\n            state.done = t >= duration;\n            return state;\n        },\n        flipTarget: () => {\n            keyframeValues.reverse();\n            interpolator = createInterpolator();\n        },\n    };\n}\n\nexport { convertOffsetToTimes, defaultEasing, defaultOffset, keyframes };\n","import { warning } from 'hey-listen';\nimport { clamp } from '../../utils/clamp.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= maxDuration * 1000, \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, duration / 1000);\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = duration * 1000;\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n","import { findSpring, calcAngularFreq } from './find-spring.mjs';\nimport { velocityPerSecond } from '../../utils/velocity-per-second.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            velocity: 0.0,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nconst velocitySampleDuration = 5;\n/**\n * This is based on the spring implementation of Wobble https://github.com/skevy/wobble\n */\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    let origin = keyframes[0];\n    let target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    let resolveSpring = zero;\n    let initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    function createSpring() {\n        const initialDelta = target - origin;\n        const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n        /**\n         * If we're working on a granular scale, use smaller defaults for determining\n         * when the spring is finished.\n         *\n         * These defaults have been selected emprically based on what strikes a good\n         * ratio between feeling good and finishing as soon as changes are imperceptible.\n         */\n        const isGranularScale = Math.abs(initialDelta) < 5;\n        restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n        restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n        if (dampingRatio < 1) {\n            const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n            // Underdamped spring\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (target -\n                    envelope *\n                        (((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) /\n                            angularFreq) *\n                            Math.sin(angularFreq * t) +\n                            initialDelta * Math.cos(angularFreq * t)));\n            };\n        }\n        else if (dampingRatio === 1) {\n            // Critically damped spring\n            resolveSpring = (t) => target -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta +\n                        (initialVelocity + undampedAngularFreq * initialDelta) *\n                            t);\n        }\n        else {\n            // Overdamped spring\n            const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                // When performing sinh or cosh values can hit Infinity so we cap them here\n                const freqForT = Math.min(dampedAngularFreq * t, 300);\n                return (target -\n                    (envelope *\n                        ((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) *\n                            Math.sinh(freqForT) +\n                            dampedAngularFreq *\n                                initialDelta *\n                                Math.cosh(freqForT))) /\n                        dampedAngularFreq);\n            };\n        }\n    }\n    createSpring();\n    return {\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        const prevT = Math.max(0, t - velocitySampleDuration);\n                        currentVelocity = velocityPerSecond(current - resolveSpring(prevT), t - prevT);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n        flipTarget: () => {\n            initialVelocity = -initialVelocity;\n            [origin, target] = [target, origin];\n            createSpring();\n        },\n    };\n}\nspring.needsInterpolation = (a, b) => typeof a === \"string\" || typeof b === \"string\";\nconst zero = (_t) => 0;\n\nexport { spring };\n","function decay({ \n/**\n * The decay animation dynamically calculates an end of the animation\n * based on the initial keyframe, so we only need to define a single keyframe\n * as default.\n */\nkeyframes = [0], velocity = 0, power = 0.8, timeConstant = 350, restDelta = 0.5, modifyTarget, }) {\n    const origin = keyframes[0];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    return {\n        next: (t) => {\n            const delta = -amplitude * Math.exp(-t / timeConstant);\n            state.done = !(delta > restDelta || delta < -restDelta);\n            state.value = state.done ? target : target + delta;\n            return state;\n        },\n        flipTarget: () => { },\n    };\n}\n\nexport { decay };\n","import { keyframes } from './keyframes.mjs';\nimport { spring } from './spring.mjs';\nimport { decay } from './decay.mjs';\nimport { sync, cancelSync } from '../../frameloop/index.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\n\nconst types = {\n    decay,\n    keyframes: keyframes,\n    tween: keyframes,\n    spring,\n};\nfunction loopElapsed(elapsed, duration, delay = 0) {\n    return elapsed - duration - delay;\n}\nfunction reverseElapsed(elapsed, duration = 0, delay = 0, isForwardPlayback = true) {\n    return isForwardPlayback\n        ? loopElapsed(duration + -elapsed, duration, delay)\n        : duration - (elapsed - duration) + delay;\n}\nfunction hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {\n    return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;\n}\nconst framesync = (update) => {\n    const passTimestamp = ({ delta }) => update(delta);\n    return {\n        start: () => sync.update(passTimestamp, true),\n        stop: () => cancelSync.update(passTimestamp),\n    };\n};\nfunction animate({ duration, driver = framesync, elapsed = 0, repeat: repeatMax = 0, repeatType = \"loop\", repeatDelay = 0, keyframes: keyframes$1, autoplay = true, onPlay, onStop, onComplete, onRepeat, onUpdate, type = \"keyframes\", ...options }) {\n    var _a, _b;\n    const initialElapsed = elapsed;\n    let driverControls;\n    let repeatCount = 0;\n    let computedDuration = duration;\n    let isComplete = false;\n    let isForwardPlayback = true;\n    let interpolateFromNumber;\n    const animator = types[keyframes$1.length > 2 ? \"keyframes\" : type] || keyframes;\n    const origin = keyframes$1[0];\n    const target = keyframes$1[keyframes$1.length - 1];\n    let state = { done: false, value: origin };\n    if ((_b = (_a = animator).needsInterpolation) === null || _b === void 0 ? void 0 : _b.call(_a, origin, target)) {\n        interpolateFromNumber = interpolate([0, 100], [origin, target], {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const animation = animator({\n        ...options,\n        duration,\n        keyframes: keyframes$1,\n    });\n    function repeat() {\n        repeatCount++;\n        if (repeatType === \"reverse\") {\n            isForwardPlayback = repeatCount % 2 === 0;\n            elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);\n        }\n        else {\n            elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);\n            if (repeatType === \"mirror\")\n                animation.flipTarget();\n        }\n        isComplete = false;\n        onRepeat && onRepeat();\n    }\n    function complete() {\n        driverControls && driverControls.stop();\n        onComplete && onComplete();\n    }\n    function update(delta) {\n        if (!isForwardPlayback)\n            delta = -delta;\n        elapsed += delta;\n        if (!isComplete) {\n            state = animation.next(Math.max(0, elapsed));\n            if (interpolateFromNumber)\n                state.value = interpolateFromNumber(state.value);\n            isComplete = isForwardPlayback ? state.done : elapsed <= 0;\n        }\n        onUpdate && onUpdate(state.value);\n        if (isComplete) {\n            if (repeatCount === 0) {\n                computedDuration =\n                    computedDuration !== undefined ? computedDuration : elapsed;\n            }\n            if (repeatCount < repeatMax) {\n                hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();\n            }\n            else {\n                complete();\n            }\n        }\n    }\n    function play() {\n        onPlay && onPlay();\n        driverControls = driver(update);\n        driverControls.start();\n    }\n    autoplay && play();\n    return {\n        stop: () => {\n            onStop && onStop();\n            driverControls && driverControls.stop();\n        },\n        /**\n         * Set the current time of the animation. This is purposefully\n         * mirroring the WAAPI animation API to make them interchanagable.\n         * Going forward this file should be ported more towards\n         * https://github.com/motiondivision/motionone/blob/main/packages/animation/src/Animation.ts\n         * Which behaviourally adheres to WAAPI as far as possible.\n         *\n         * WARNING: This is not safe to use for most animations. We currently\n         * only use it for handoff from WAAPI within Framer.\n         *\n         * This animation function consumes time every frame rather than being sampled for time.\n         * So the sample() method performs some headless frames to ensure\n         * repeats are handled correctly. Ideally in the future we will replace\n         * that method with this, once repeat calculations are pure.\n         */\n        set currentTime(t) {\n            elapsed = initialElapsed;\n            update(t);\n        },\n        /**\n         * animate() can't yet be sampled for time, instead it\n         * consumes time. So to sample it we have to run a low\n         * temporal-resolution version.\n         */\n        sample: (t) => {\n            elapsed = initialElapsed;\n            const sampleResolution = duration && typeof duration === \"number\"\n                ? Math.max(duration * 0.5, 50)\n                : 50;\n            let sampleElapsed = 0;\n            update(0);\n            while (sampleElapsed <= t) {\n                const remaining = t - sampleElapsed;\n                update(Math.min(remaining, sampleResolution));\n                sampleElapsed += sampleResolution;\n            }\n            return state;\n        },\n    };\n}\n\nexport { animate, hasRepeatDelayElapsed, loopElapsed, reverseElapsed };\n","function isWaapiSupportedEasing(easing) {\n    return (!easing || // Default easing\n        Array.isArray(easing) || // Bezier curve\n        (typeof easing === \"string\" && supportedWaapiEasing[easing]));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing)\n        return undefined;\n    return Array.isArray(easing)\n        ? cubicBezierAsString(easing)\n        : supportedWaapiEasing[easing];\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    return element.animate({ [valueName]: keyframes, offset: times }, {\n        delay,\n        duration,\n        easing: mapEasingToNativeEasing(ease),\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { animateStyle };\n","const featureTests = {\n    waapi: () => Object.hasOwnProperty.call(Element.prototype, \"animate\"),\n};\nconst results = {};\nconst supports = {};\n/**\n * Generate features tests that cache their results.\n */\nfor (const key in featureTests) {\n    supports[key] = () => {\n        if (results[key] === undefined)\n            results[key] = featureTests[key]();\n        return results[key];\n    };\n}\n\nexport { supports };\n","function getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }) {\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : keyframes.length - 1;\n    return keyframes[index];\n}\n\nexport { getFinalKeyframe };\n","import { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\"opacity\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0;\n    if (!canAccelerateAnimation)\n        return false;\n    let { keyframes, duration = 300, elapsed = 0, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n        /**\n         * If we need to pre-generate keyframes and repeat is infinite then\n         * early return as this will lock the thread.\n         */\n        if (options.repeat === Infinity)\n            return;\n        const sampleAnimation = animate({ ...options, elapsed: 0 });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < 20000) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        delay: -elapsed,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        sync.update(() => animation.cancel());\n        onComplete && onComplete();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        get currentTime() {\n            return animation.currentTime || 0;\n        },\n        set currentTime(t) {\n            animation.currentTime = t;\n        },\n        stop: () => {\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animate({ ...options, autoplay: false });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            sync.update(() => animation.cancel());\n        },\n    };\n}\n\nexport { createAcceleratedAnimation };\n","import { sync, cancelSync } from '../frameloop/index.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelSync.read(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    sync.read(checkElapsed, true);\n    return () => cancelSync.read(checkElapsed);\n}\n\nexport { delay };\n","import { delay } from '../utils/delay.mjs';\n\nfunction createInstantAnimation({ keyframes, elapsed, onUpdate, onComplete, }) {\n    const setValue = () => {\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n    };\n    return elapsed ? { stop: delay(setValue, -elapsed) } : setValue();\n}\n\nexport { createInstantAnimation };\n","import { animate } from './index.mjs';\nimport { velocityPerSecond } from '../../utils/velocity-per-second.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\n\nfunction inertia({ keyframes, velocity = 0, min, max, power = 0.8, timeConstant = 750, bounceStiffness = 500, bounceDamping = 10, restDelta = 1, modifyTarget, driver, onUpdate, onComplete, onStop, }) {\n    const origin = keyframes[0];\n    let currentAnimation;\n    function isOutOfBounds(v) {\n        return (min !== undefined && v < min) || (max !== undefined && v > max);\n    }\n    function findNearestBoundary(v) {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    }\n    function startAnimation(options) {\n        currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();\n        currentAnimation = animate({\n            keyframes: [0, 1],\n            velocity: 0,\n            ...options,\n            driver,\n            onUpdate: (v) => {\n                var _a;\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);\n                (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, v);\n            },\n            onComplete,\n            onStop,\n        });\n    }\n    function startSpring(options) {\n        startAnimation({\n            type: \"spring\",\n            stiffness: bounceStiffness,\n            damping: bounceDamping,\n            restDelta,\n            ...options,\n        });\n    }\n    if (isOutOfBounds(origin)) {\n        // Start the animation with spring if outside the defined boundaries\n        startSpring({\n            velocity,\n            keyframes: [origin, findNearestBoundary(origin)],\n        });\n    }\n    else {\n        /**\n         * Or if the value is out of bounds, simulate the inertia movement\n         * with the decay animation.\n         *\n         * Pre-calculate the target so we can detect if it's out-of-bounds.\n         * If it is, we want to check per frame when to switch to a spring\n         * animation\n         */\n        let target = power * velocity + origin;\n        if (typeof modifyTarget !== \"undefined\")\n            target = modifyTarget(target);\n        const boundary = findNearestBoundary(target);\n        const heading = boundary === min ? -1 : 1;\n        let prev;\n        let current;\n        const checkBoundary = (v) => {\n            prev = current;\n            current = v;\n            velocity = velocityPerSecond(v - prev, frameData.delta);\n            if ((heading === 1 && v > boundary) ||\n                (heading === -1 && v < boundary)) {\n                startSpring({ keyframes: [v, boundary], velocity });\n            }\n        };\n        startAnimation({\n            type: \"decay\",\n            keyframes: [origin, 0],\n            velocity,\n            timeConstant,\n            power,\n            restDelta,\n            modifyTarget,\n            onUpdate: isOutOfBounds(target) ? checkBoundary : undefined,\n        });\n    }\n    return {\n        stop: () => currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop(),\n    };\n}\n\nexport { inertia };\n","const underDampedSpring = () => ({\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n});\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst linearTween = () => ({\n    type: \"keyframes\",\n    ease: \"linear\",\n    duration: 0.3,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\nconst defaultTransitions = {\n    x: underDampedSpring,\n    y: underDampedSpring,\n    z: underDampedSpring,\n    rotate: underDampedSpring,\n    rotateX: underDampedSpring,\n    rotateY: underDampedSpring,\n    rotateZ: underDampedSpring,\n    scaleX: criticallyDampedSpring,\n    scaleY: criticallyDampedSpring,\n    scale: criticallyDampedSpring,\n    opacity: linearTween,\n    backgroundColor: linearTween,\n    color: linearTween,\n    default: criticallyDampedSpring,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else {\n        const factory = defaultTransitions[valueKey] || defaultTransitions.default;\n        return factory(keyframes[1]);\n    }\n};\n\nexport { criticallyDampedSpring, getDefaultTransition, linearTween, underDampedSpring };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (key, value) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        complex.test(value) && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\n\n/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction isZero(value) {\n    return (value === 0 ||\n        (typeof value === \"string\" &&\n            parseFloat(value) === 0 &&\n            value.indexOf(\" \") === -1));\n}\nfunction getZeroUnit(potentialUnitType) {\n    return typeof potentialUnitType === \"number\"\n        ? 0\n        : getAnimatableNone(\"\", potentialUnitType);\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n\nexport { getValueTransition, getZeroUnit, isTransitionDefined, isZero };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\nimport { isAnimatable } from './is-animatable.mjs';\nimport { isZero, getZeroUnit } from './transitions.mjs';\n\nfunction getKeyframes(value, valueName, target, transition) {\n    const isTargetAnimatable = isAnimatable(valueName, target);\n    let origin = transition.from !== undefined ? transition.from : value.get();\n    if (origin === \"none\" && isTargetAnimatable && typeof target === \"string\") {\n        /**\n         * If we're trying to animate from \"none\", try and get an animatable version\n         * of the target. This could be improved to work both ways.\n         */\n        origin = getAnimatableNone(valueName, target);\n    }\n    else if (isZero(origin) && typeof target === \"string\") {\n        origin = getZeroUnit(target);\n    }\n    else if (!Array.isArray(target) &&\n        isZero(target) &&\n        typeof origin === \"string\") {\n        target = getZeroUnit(origin);\n    }\n    /**\n     * If the target has been defined as a series of keyframes\n     */\n    if (Array.isArray(target)) {\n        /**\n         * Ensure an initial wildcard keyframe is hydrated by the origin.\n         * TODO: Support extra wildcard keyframes i.e [1, null, 0]\n         */\n        if (target[0] === null) {\n            target[0] = origin;\n        }\n        return target;\n    }\n    else {\n        return [origin, target];\n    }\n}\n\nexport { getKeyframes };\n","import { warning } from 'hey-listen';\nimport { secondsToMilliseconds } from '../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from './waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from './create-instant-animation.mjs';\nimport { animate } from './legacy-popmotion/index.mjs';\nimport { inertia } from './legacy-popmotion/inertia.mjs';\nimport { getDefaultTransition } from './utils/default-transitions.mjs';\nimport { isAnimatable } from './utils/is-animatable.mjs';\nimport { getKeyframes } from './utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from './utils/transitions.mjs';\n\nconst createMotionValueAnimation = (valueName, value, target, transition = {}) => {\n    return (onComplete) => {\n        const valueTransition = getValueTransition(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */\n        const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */\n        let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */\n        const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ...valueTransition,\n            elapsed,\n            onUpdate: (v) => {\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: () => {\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n        };\n        if (!isOriginAnimatable ||\n            !isTargetAnimatable ||\n            instantAnimationState.current ||\n            valueTransition.type === false) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */\n            return createInstantAnimation(options);\n        }\n        else if (valueTransition.type === \"inertia\") {\n            /**\n             * If this is an inertia animation, we currently don't support pre-generating\n             * keyframes for this as such it must always run on the main thread.\n             */\n            return inertia(options);\n        }\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */\n        if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options),\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */\n        if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        const visualElement = value.owner;\n        const element = visualElement && visualElement.current;\n        /**\n         * Animate via WAAPI if possible.\n         */\n        if (visualElement &&\n            element instanceof HTMLElement &&\n            !(visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onUpdate)) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation)\n                return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */\n        return animate(options);\n    };\n};\n\nexport { createMotionValueAnimation };\n","import { setTarget } from './setters.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\nimport { sync } from '../../frameloop/index.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = animateTarget(visualElement, resolvedDefinition, options);\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\nfunction animateVariant(visualElement, variant, options = {}) {\n    var _a;\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => animateTarget(visualElement, resolved, options)\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = ((_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.size)\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(last);\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\n/**\n * @internal\n */\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    var _a;\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type && ((_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.getState()[type]);\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = { delay, elapsed: 0, ...transition };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, sync);\n            }\n        }\n        let animation = value.start(createMotionValueAnimation(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation = animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    return Promise.all(animations).then(() => {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\n\nexport { animateVisualElement, sortByTreeOrder, stopAnimation };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { animateVisualElement } from './animation.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { AnimationType } from './types.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\nconst variantPriorityOrder = [\n    AnimationType.Animate,\n    AnimationType.InView,\n    AnimationType.Focus,\n    AnimationType.Hover,\n    AnimationType.Tap,\n    AnimationType.Drag,\n    AnimationType.Exit,\n];\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        [AnimationType.Animate]: createTypeState(true),\n        [AnimationType.InView]: createTypeState(),\n        [AnimationType.Hover]: createTypeState(),\n        [AnimationType.Tap]: createTypeState(),\n        [AnimationType.Drag]: createTypeState(),\n        [AnimationType.Focus]: createTypeState(),\n        [AnimationType.Exit]: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState, variantPriorityOrder };\n","import { useEffect, useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { usePresence } from '../../components/AnimatePresence/use-presence.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { createAnimationState } from '../../render/utils/animation-state.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.mjs';\n\nconst animations = {\n    animation: makeRenderlessComponent(({ visualElement, animate }) => {\n        /**\n         * We dynamically generate the AnimationState manager as it contains a reference\n         * to the underlying animation library. We only want to load that if we load this,\n         * so people can optionally code split it out using the `m` component.\n         */\n        visualElement.animationState || (visualElement.animationState = createAnimationState(visualElement));\n        /**\n         * Subscribe any provided AnimationControls to the component's VisualElement\n         */\n        if (isAnimationControls(animate)) {\n            useEffect(() => animate.subscribe(visualElement), [animate]);\n        }\n    }),\n    exit: makeRenderlessComponent((props) => {\n        const { custom, visualElement } = props;\n        const [isPresent, safeToRemove] = usePresence();\n        const presenceContext = useContext(PresenceContext);\n        useEffect(() => {\n            visualElement.isPresent = isPresent;\n            const animation = visualElement.animationState &&\n                visualElement.animationState.setActive(AnimationType.Exit, !isPresent, {\n                    custom: (presenceContext && presenceContext.custom) ||\n                        custom,\n                });\n            if (animation && !isPresent) {\n                animation.then(safeToRemove);\n            }\n        }, [isPresent]);\n    }),\n};\n\nexport { animations };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { sync, cancelSync } from '../frameloop/index.mjs';\nimport { secondsToMilliseconds } from '../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../events/use-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { distance2D } from '../utils/distance.mjs';\nimport { frameData } from '../frameloop/data.mjs';\nimport { isPrimaryPointer } from '../events/utils/is-primary-pointer.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            sync.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelSync.update(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000;\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin === null || origin === void 0 ? void 0 : origin.originX);\n    calcAxisDelta(delta.y, source.y, target.y, origin === null || origin === void 0 ? void 0 : origin.originY);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mix } from '../../utils/mix.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    var _a, _b;\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        if (((_b = (_a = node.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === \"contents\")\n            continue;\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","import { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        if (this.visualElement.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            var _a;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                var _a, _b;\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const measuredAxis = (_b = (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.layoutBox[axis];\n                    if (measuredAxis) {\n                        const length = calcLength(measuredAxis);\n                        current = length * (parseFloat(current) / 100);\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n            (_a = this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n    }\n    cancel() {\n        var _a, _b;\n        this.isDragging = false;\n        if (this.visualElement.projection) {\n            this.visualElement.projection.isAnimationBlocked = false;\n        }\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints === null || constraints === void 0 ? void 0 : constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(createMotionValueAnimation(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        var _a;\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const externalMotionValue = this.visualElement.getProps()[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, ((_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        var _a;\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        var _a;\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { useEffect } from 'react';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\n\n/**\n * A hook that allows an element to be dragged.\n *\n * @internal\n */\nfunction useDrag(props) {\n    const { dragControls: groupDragControls, visualElement } = props;\n    const dragControls = useConstant(() => new VisualElementDragControls(visualElement));\n    // If we've been provided a DragControls for manual control over the drag gesture,\n    // subscribe this component to it on mount.\n    useEffect(() => groupDragControls && groupDragControls.subscribe(dragControls), [dragControls, groupDragControls]);\n    // Apply the event listeners to the element\n    useEffect(() => dragControls.addListeners(), [dragControls]);\n}\n\nexport { useDrag };\n","import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { PanSession } from './PanSession.mjs';\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @privateRemarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\nfunction usePanGesture({ onPan, onPanStart, onPanEnd, onPanSessionStart, visualElement, }) {\n    const hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n    const panSession = useRef(null);\n    const { transformPagePoint } = useContext(MotionConfigContext);\n    const handlers = {\n        onSessionStart: onPanSessionStart,\n        onStart: onPanStart,\n        onMove: onPan,\n        onEnd: (event, info) => {\n            panSession.current = null;\n            onPanEnd && onPanEnd(event, info);\n        },\n    };\n    useEffect(() => {\n        if (panSession.current !== null) {\n            panSession.current.updateHandlers(handlers);\n        }\n    });\n    function onPointerDown(event) {\n        panSession.current = new PanSession(event, handlers, {\n            transformPagePoint,\n        });\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n    useUnmountEffect(() => panSession.current && panSession.current.end());\n}\n\nexport { usePanGesture };\n","import { useDrag } from '../../gestures/drag/use-drag.mjs';\nimport { usePanGesture } from '../../gestures/use-pan-gesture.mjs';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.mjs';\n\nconst drag = {\n    pan: makeRenderlessComponent(usePanGesture),\n    drag: makeRenderlessComponent(useDrag),\n};\n\nexport { drag };\n","import { invariant } from 'hey-listen';\n\nfunction isCSSVariable(value) {\n    return typeof value === \"string\" && value.startsWith(\"var(--\");\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = cssVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariable(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariable(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariable(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd && transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };\n","import { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from 'hey-listen';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nvar BoundingBoxDimension;\n(function (BoundingBoxDimension) {\n    BoundingBoxDimension[\"width\"] = \"width\";\n    BoundingBoxDimension[\"height\"] = \"height\";\n    BoundingBoxDimension[\"left\"] = \"left\";\n    BoundingBoxDimension[\"right\"] = \"right\";\n    BoundingBoxDimension[\"top\"] = \"top\";\n    BoundingBoxDimension[\"bottom\"] = \"bottom\";\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { BoundingBoxDimension, positionalValues, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.mjs';\nimport { unitConversion } from './unit-conversion.mjs';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"9.0.1\", `Attempting to mix Framer Motion versions ${nextValue.version} with 9.0.1 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { sync, cancelSync } from '../frameloop/index.mjs';\nimport { invariant } from 'hey-listen';\nimport { createElement } from 'react';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Tracks whether this VisualElement's React component is currently present\n         * within the defined React tree.\n         */\n        this.isPresent = true;\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => sync.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        var _a;\n        this.current = instance;\n        if (this.projection) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.setProps(this.props);\n    }\n    unmount() {\n        var _a, _b, _c;\n        (_a = this.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(this.notifyUpdate);\n        cancelSync.render(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        (_b = this.removeFromVariantTree) === null || _b === void 0 ? void 0 : _b.call(this);\n        (_c = this.parent) === null || _c === void 0 ? void 0 : _c.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                sync.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type)\n            return 0;\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n        const features = [];\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Component } = featureDefinitions[name];\n            /**\n             * It might be possible in the future to use this moment to\n             * dynamically request functionality. In initial tests this\n             * was producing a lot of duplication amongst bundles.\n             */\n            if (isEnabled(renderedProps) && Component) {\n                features.push(createElement(Component, {\n                    key: name,\n                    ...renderedProps,\n                    visualElement: this,\n                }));\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return features;\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    setProps(props) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        const prevProps = this.props;\n        this.props = props;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        var _a;\n        return (_a = this.props.variants) === null || _a === void 0 ? void 0 : _a[name];\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        var _a;\n        return this.isVariantNode ? this : (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getClosestVariantNode();\n    }\n    getVariantContext(startAtParent = false) {\n        var _a, _b;\n        if (startAtParent)\n            return (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getVariantContext();\n        if (!this.isControllingVariants) {\n            const context = ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.getVariantContext()) || {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        var _a;\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        var _a;\n        this.values.delete(key);\n        (_a = this.valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        this.valueSubscriptions.delete(key);\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        var _a;\n        (_a = this.events[eventName]) === null || _a === void 0 ? void 0 : _a.notify(...args);\n    }\n}\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nexport { VisualElement };\n","import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariable(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        var _a;\n        if (transformProps.has(key)) {\n            return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { cssVariableRegex } from '../../render/dom/utils/css-variables-conversion.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst varToken = \"_$css\";\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        /**\n         * We need to first strip and store CSS variables from the string.\n         */\n        const containsCSSVariables = latest.includes(\"var(\");\n        const cssVariables = [];\n        if (containsCSSVariables) {\n            latest = latest.replace(cssVariableRegex, (match) => {\n                cssVariables.push(match);\n                return varToken;\n            });\n        }\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        let output = template(shadow);\n        if (containsCSSVariables) {\n            let i = 0;\n            output = output.replace(varToken, () => {\n                const cssVariable = cssVariables[i];\n                i++;\n                return cssVariable;\n            });\n        }\n        return output;\n    },\n};\n\nexport { correctBoxShadow };\n","import { sync } from '../../../frameloop/index.mjs';\nimport React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                sync.postRender(() => {\n                    var _a;\n                    if (!((_a = projection.getStack()) === null || _a === void 0 ? void 0 : _a.members.length)) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            if (!projection.currentAnimation && projection.isLead()) {\n                this.safeToRemove();\n            }\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { MeasureLayout } from './MeasureLayout.mjs';\n\nconst layoutFeatures = {\n    measureLayout: MeasureLayout,\n};\n\nexport { layoutFeatures };\n","import { createMotionValueAnimation } from './index.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\n\n/**\n * Animate a single value or a `MotionValue`.\n *\n * The first argument is either a `MotionValue` to animate, or an initial animation value.\n *\n * The second is either a value to animate to, or an array of keyframes to animate through.\n *\n * The third argument can be either tween or spring options, and optional lifecycle methods: `onUpdate`, `onPlay`, `onComplete`, `onRepeat` and `onStop`.\n *\n * Returns `AnimationPlaybackControls`, currently just a `stop` method.\n *\n * ```javascript\n * const x = useMotionValue(0)\n *\n * useEffect(() => {\n *   const controls = animate(x, 100, {\n *     type: \"spring\",\n *     stiffness: 2000,\n *     onComplete: v => {}\n *   })\n *\n *   return controls.stop\n * })\n * ```\n *\n * @public\n */\nfunction animate(from, to, transition = {}) {\n    const value = isMotionValue(from) ? from : motionValue(from);\n    value.start(createMotionValueAnimation(\"\", value, to, transition));\n    return {\n        stop: () => value.stop(),\n        isAnimating: () => value.isAnimating(),\n    };\n}\n\nexport { animate };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        var _a;\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if ((_a = node.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            var _a, _b, _c, _d, _e;\n            (_b = (_a = node.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_e = (_c = node.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { cancelSync, flushSync, sync } from '../../frameloop/index.mjs';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            this.isTransformDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this or any\n             * child might need recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(elementId, node) {\n            this.potentialNodes.set(elementId, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            var _a;\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    var _a, _b, _c, _d, _e;\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        ((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            var _a;\n            return (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            var _a, _b, _c;\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            this.prevTransformTemplateValue = (_c = this.getTransformTemplate()) === null || _c === void 0 ? void 0 : _c(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            var _a;\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplateValue = (_a = this.getTransformTemplate()) === null || _a === void 0 ? void 0 : _a(this.latestValues, \"\");\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            var _a;\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.isProjectionDirty = true;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            if (!this.isProjectionDirty && !this.attemptToResolveRelativeTarget)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if ((this.parent.relativeTarget ||\n                this.parent.targetDelta ||\n                this.parent.options.layoutRoot) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            var _a;\n            const { isProjectionDirty, isTransformDirty } = this;\n            this.isProjectionDirty = this.isTransformDirty = false;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            if (isProjectionDirty)\n                canSkip = false;\n            if (isShared && isTransformDirty)\n                canSkip = false;\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a, _b, _c;\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            var _a, _b;\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const isSharedLayoutAnimation = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.source) !== ((_a = this.layout) === null || _a === void 0 ? void 0 : _a.source);\n            const isOnlyMember = (((_b = this.getStack()) === null || _b === void 0 ? void 0 : _b.members.length) || 0) <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                var _a;\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        var _a;\n                        this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    },\n                    onComplete: () => {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Propagate isProjectionDirty. Nodes are ordered by depth, so if the parent here\n     * is dirty we can simply pass this forward.\n     */\n    node.isProjectionDirty || (node.isProjectionDirty = Boolean(node.parent && node.parent.isProjectionDirty));\n    /**\n     * Propagate isTransformDirty.\n     */\n    node.isTransformDirty || (node.isTransformDirty = Boolean(node.parent && node.parent.isTransformDirty));\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, elementId) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode(0, {});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { createMotionComponent } from '../../motion/index.mjs';\nimport { createMotionProxy } from './motion-proxy.mjs';\nimport { createDomMotionConfig } from './utils/create-config.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { animations } from '../../motion/features/animations.mjs';\nimport { drag } from '../../motion/features/drag.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\nimport { layoutFeatures } from '../../motion/features/layout/index.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst featureBundle = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layoutFeatures,\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nconst motion = /*@__PURE__*/ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, featureBundle, createDomVisualElement, HTMLProjectionNode));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, featureBundle, createDomVisualElement, HTMLProjectionNode));\n}\n\nexport { createDomMotionComponent, motion };\n"],"names":["warning","invariant","isValidProp","AnimationType","BoundingBoxDimension","MotionConfigContext","react","createContext","transformPagePoint","p","isStatic","reducedMotion","MotionContext","PresenceContext_PresenceContext","isBrowser","document","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","LazyContext","strict","isRefObject","ref","Object","prototype","hasOwnProperty","call","isVariantLabel","v","Array","isArray","isAnimationControls","start","variantProps","isControllingVariants","props","animate","some","name","isVariantNode","Boolean","variants","variantLabelsAsDependency","prop","join","createDefinition","isEnabled","propNames","featureDefinitions","measureLayout","animation","exit","drag","focus","hover","tap","pan","inView","useConstant","init","useRef","current","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","id","LayoutGroupContext","VisualElementHandler","Component","getSnapshotBeforeUpdate","visualElement","setProps","componentDidUpdate","render","children","SwitchLayoutGroupContext","motionComponentSymbol","Symbol","for","lowercaseSVGElements","isSVGComponent","includes","indexOf","test","scaleCorrectors","transformPropOrder","transformProps","Set","isForcedMotionValue","key","layout","layoutId","has","startsWith","undefined","isMotionValue","value","getVelocity","translateAlias","x","y","z","transformPerspective","sortTransformProps","a","b","isCSSVariable","getValueAsType","type","transform","clamp","min","max","Math","number","parse","parseFloat","alpha","scale","default","sanitize","round","floatRegex","colorRegex","singleColorRegex","isString","createUnitType","endsWith","unit","split","length","degrees","percent","px","vh","vw","progressPercentage","type_int_int","numberValueTypes","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderRadius","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","width","maxWidth","height","maxHeight","size","top","right","bottom","left","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","rotate","rotateX","rotateY","rotateZ","scaleX","scaleY","scaleZ","skew","skewX","skewY","distance","translateX","translateY","translateZ","perspective","opacity","originX","originY","originZ","zIndex","fillOpacity","strokeOpacity","numOctaves","buildHTMLStyles","state","latestValues","options","transformTemplate","style","vars","transformKeys","transformOrigin","hasTransform","hasTransformOrigin","transformIsNone","valueType","valueAsType","push","buildTransform","enableHardwareAcceleration","allowTransformNone","transformIsDefault","transformString","sort","trim","createHtmlRenderState","copyRawValuesOnly","target","source","useHTMLProps","visualState","htmlProps","useStyle","styleProp","assign","useInitialMotionValues","useMemo","transformValues","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","onTap","onTapStart","whileTap","validMotionProps","isValidMotionProp","shouldForward","require","_a","calcOrigin","origin","offset","dashKeys","array","camelKeys","buildSVGAttrs","attrX","attrY","pathLength","pathSpacing","pathOffset","latest","isSVGTag","viewBox","attrs","dimensions","calcSVGTransformOrigin","pxOriginX","pxOriginY","buildSVGPath","spacing","useDashCase","keys","createSvgRenderState","tag","toLowerCase","useSVGProps","_isStatic","visualProps","rawStyles","camelToDash","str","replace","renderHTML","element","projection","getProjectionStyles","setProperty","camelCaseAttributes","renderSVG","renderState","_styleProp","setAttribute","scrapeMotionValuesFromProps","prevProps","newValues","scrape_motion_values_scrapeMotionValuesFromProps","targetKey","toUpperCase","resolveVariantFromProps","definition","custom","currentValues","currentVelocity","isKeyframesTarget","isCustomValue","mix","toValue","resolveFinalValueInKeyframes","resolveMotionValue","unwrappedValue","get","makeUseVisualState","context","useContext","presenceContext","make","makeState","createRenderState","onMount","makeLatestValues","scrapeMotionValues","values","motionValues","initial","isControllingVariants$1","isVariantNode$1","inherit","isInitialAnimationBlocked","variantToSet","list","forEach","resolved","transitionEnd","transition","valueTarget","index","mount","instance","config","svgMotionConfig","useVisualState","getBBox","getBoundingClientRect","e","tagName","htmlMotionConfig","addDomEvent","eventName","handler","passive","addEventListener","removeEventListener","useDomEvent","isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","point","addPointerInfo","addPointerEvent","usePointerEvent","createLock","lock","globalHorizontalLock","globalVerticalLock","getGlobalLock","openHorizontal","openVertical","isDragActive","openGestureLock","createHoverEvent","isActive","applyVariants","callback","info","animationState","setActive","Hover","isNodeOrChild","parent","child","parentElement","useUnmountEffect","combineFunctions","pipe","transformers","reduce","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","observerCallbacks","WeakMap","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","thresholdNames","all","useIntersectionObserver","shouldObserve","root","rootMargin","amount","once","threshold","observeIntersection","rootInteresectionObserver","initIntersectionObserver","lookupRoot","set","rootObservers","JSON","stringify","IntersectionObserver","observe","delete","unobserve","isIntersecting","isInView","hasEnteredView","InView","getProps","onViewportEnter","onViewportLeave","useMissingIntersectionObserver","fallback","requestAnimationFrame","makeRenderlessComponent","hook","gestureAnimations","whileInView","viewport","useObserver","onTapCancel","hasPressListeners","isPressing","cancelPointerEndListeners","eventOptions","removePointerEndListener","checkPointerEnd","latestProps","Tap","onPointerUp","_b","_c","_d","onPointerCancel","onPointerStart","callbackDependencies","startPress","useCallback","window","startAccessiblePress","stopKeydownListener","stopBlurListener","whileFocus","isFocusActive","onFocus","isFocusVisible","matches","Focus","onBlur","onHoverStart","onHoverEnd","whileHover","usePresence","isPresent","onExitComplete","register","useId","shallowCompare","next","prev","prevLength","i","isNumericalString","isZeroValueString","frameData","delta","timestamp","defaultTimestep","getCurrentTime","performance","now","Date","onNextFrame","setTimeout","useDefaultElapsed","runNextFrame","isProcessing","stepsOrder","steps","acc","createRenderStep","toRun","toRunNextFrame","numToRun","flushNextFrame","toKeepAlive","WeakSet","step","schedule","keepAlive","immediate","addToCurrentFrame","buffer","add","cancel","splice","process","sync","startLoop","cancelSync","flushSync","processStep","stepId","processFrame","addUniqueItem","arr","item","removeItem","SubscriptionManager","constructor","subscriptions","notify","c","numSubscriptions","getSize","clear","velocityPerSecond","velocity","frameDuration","isFloat","isNaN","MotionValue","version","timeDelta","lastUpdated","canTrackVelocity","events","updateAndNotify","postRender","scheduleVelocityCheck","change","velocityChange","renderRequest","velocityCheck","hasAnimated","owner","onChange","subscription","on","unsubscribe","read","stop","clearListeners","eventManagers","attach","passiveEffect","stopPassiveEffect","setWithVelocity","jump","getPrevious","startAnimation","Promise","resolve","animationStart","then","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","motionValue","isColorString","testProp","splitColor","aName","bName","cName","match","clampRgbUnit","rgbUnit","rgba","red","green","blue","alpha$1","hex","r","g","substring","parseInt","hsla","hue","saturation","lightness","color","colorToken","numberToken","analyseComplexValue","numColors","numNumbers","colors","map","numbers","tokenised","createTransformer","numValues","output","convertNumbersToZero","complex","getAnimatableNone","parsed","transformer","maxDefaults","applyDefaultFilter","slice","defaultValue","functionRegex","filter","functions","defaultValueTypes","backgroundColor","outlineColor","fill","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","animatable_none_getAnimatableNone","defaultValueType","testValueType","dimensionValueTypes","findDimensionValueType","find","valueTypes","findValueType","resolveVariant","getCurrent","isWillChangeMotionValue","optimizedAppearDataAttribute","secondsToMilliseconds","seconds","instantAnimationState","mirrorEasing","easing","reverseEasing","easeIn","easeOut","easeInOut","from","to","progress","hueToRgb","q","t","mixLinearColor","fromExpo","sqrt","colorTypes","getColorType","asRGBA","hey_listen_es","k","model","hslaToRgba","mixColor","fromRGBA","toRGBA","blended","getMixer","mixComplex","mixArray","blendValue","fromThis","mixObject","template","originStats","targetStats","canInterpolate","K","toFromDifference","mixNumber","interpolate","input","isClamp","ease","mixer","inputLength","reverse","mixers","createMixers","customMixer","mixerFactory","detectMixerFactory","numMixers","easingFunction","interpolator","progressInRange","noop","any","calcBezier","a1","a2","cubicBezier","mX1","mY1","mX2","mY2","getTForX","binarySubdivide","lowerBound","upperBound","currentX","currentT","abs","aX","circIn","sin","acos","circOut","circInOut","backOut","backIn","backInOut","easingLookup","linear","anticipate","pow","easingDefinitionToFunction","x1","y1","x2","y2","isEasingArray","keyframes","keyframeValues","times","duration","easingFunctions","done","absoluteTimes","defaultOffset","_value","o","createInterpolator","flipTarget","calcAngularFreq","undampedFreq","dampingRatio","durationKeys","physicsKeys","isSpringType","spring","restDelta","restSpeed","stiffness","damping","mass","isResolvedFromDuration","getSpringOptions","springOptions","derived","findSpring","bounce","envelope","derivative","maxDuration","exponentialDecay","safeMin","exp","factor","d","f","initialGuess","approximateRoot","result","resolveSpring","zero","initialVelocity","createSpring","initialDelta","undampedAngularFreq","isGranularScale","angularFreq","cos","dampedAngularFreq","freqForT","sinh","cosh","prevT","isBelowVelocityThreshold","isBelowDisplacementThreshold","needsInterpolation","types","decay","power","timeConstant","modifyTarget","amplitude","ideal","tween","loopElapsed","elapsed","delay","framesync","passTimestamp","update","driver","repeat","repeatMax","repeatType","repeatDelay","keyframes$1","autoplay","onPlay","onStop","onComplete","onRepeat","onUpdate","driverControls","interpolateFromNumber","initialElapsed","repeatCount","computedDuration","isComplete","isForwardPlayback","animator","hasRepeatDelayElapsed","reverseElapsed","currentTime","sample","sampleResolution","sampleElapsed","remaining","cubicBezierAsString","supportedWaapiEasing","featureTests","waapi","Element","results","supports","acceleratedValues","timeout","checkElapsed","underDampedSpring","criticallyDampedSpring","linearTween","keyframesTransition","defaultTransitions","getDefaultTransition","valueKey","factory","isAnimatable","isZero","getZeroUnit","potentialUnitType","getValueTransition","createMotionValueAnimation","valueName","valueTransition","getKeyframes","isTargetAnimatable","originKeyframe","targetKeyframe","isOriginAnimatable","createInstantAnimation","setValue","inertia","bounceStiffness","bounceDamping","currentAnimation","isOutOfBounds","findNearestBoundary","startSpring","boundary","heading","isTransitionDefined","when","_delay","delayChildren","staggerChildren","staggerDirection","HTMLElement","acceleratedAnimation","createAcceleratedAnimation","canAccelerateAnimation","Infinity","sampleAnimation","pregeneratedKeyframes","animateStyle","mapEasingToNativeEasing","iterations","direction","onfinish","getFinalKeyframe","animateVariant","variant","transitionOverride","getAnimation","animateTarget","getChildAnimations","variantChildren","forwardDelay","animateChildren","animations","maxStaggerDuration","generateStaggerDuration","sortByTreeOrder","first","last","makeTargetAnimatable","willChange","getValue","animationTypeState","getState","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","HandoffAppearAnimations","appearId","shouldReduceMotion","remove","setTarget","hasValue","addValue","sortNodePosition","variantPriorityOrder","Animate","Drag","Exit","reversePriorityOrder","numAnimationTypes","createTypeState","prevResolvedValues","createAnimationState","animateVisualElement","resolvedDefinition","isInitialRender","buildResolvedTypeValues","animateChanges","changedActiveType","getVariantContext","removedKeys","encounteredKeys","removedVariantIndex","typeState","propIsVariant","activeDelta","isInherited","manuallyAnimateOnMount","prevProp","variantDidChange","shouldAnimateType","definitionList","resolvedValues","allKeys","markToAnimate","blockInitialAnimation","fallbackAnimation","fallbackTarget","getBaseTarget","shouldAnimate","setAnimateFunction","makeAnimator","subscribe","safeToRemove","PanSession","handlers","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","getPanInfo","history","isPanStarted","isDistancePastThreshold","distance2D","xDelta","yDelta","onStart","onMove","handlePointerMove","transformPoint","handlePointerUp","end","onEnd","onSessionEnd","panInfo","initialInfo","onSessionStart","removeListeners","updateHandlers","subtractPoint","lastDevicePoint","PanSession_getVelocity","timestampedPoint","lastPoint","time","calcLength","axis","isNear","maxDistance","calcAxisDelta","originPoint","translate","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createAxisDelta","createDelta","createAxis","createBox","eachAxis","convertBoundingBoxToBox","isIdentityScale","hasScale","has2DTranslate","is2DTranslate","applyPointDelta","boxScale","scalePoint","applyAxisDelta","applyBoxDelta","box","snapToDefault","isInteger","translateAxis","transformAxis","transforms","scaleKey","originKey","axisOrigin","xKeys","yKeys","transformBox","measureViewportBox","transformBoxPoints","topLeft","bottomRight","elementDragControls","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","panSession","stopAnimation","dragPropagation","onDragStart","resolveConstraints","isAnimationBlocked","getAxisMotionValue","measuredAxis","layoutBox","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","lockThreshold","updateAxis","getTransformPagePoint","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","dragConstraints","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","relativeConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","measurePageBox","rootProjectionNode","viewportBox","scroll","measuredConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","startAxisValueAnimation","dragKey","externalMotionValue","scalePositionWithinConstraints","boxProgress","constraints_calcOrigin","sourceLength","targetLength","updateScroll","updateLayout","addListeners","stopPointerListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","onPan","onPanStart","onPanEnd","onPanSessionStart","hasPanEvents","dragControls","groupDragControls","css_variables_conversion_isCSSVariable","cssVariableRegex","getVariableValue","depth","token","parseCSSVariable","exec","getComputedStyle","getPropertyValue","positionalKeys","isPositionalKey","hasPositionalKey","isNumOrPxType","getPosFromMatrix","matrix","pos","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","nonTranslationalTransformKeys","positionalValues","convertChangedValueTypes","changedKeys","originBbox","elementComputedStyle","display","setStaticValue","targetBbox","checkAndConvertChangedValueTypes","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","fromType","numKeyframes","fromIndex","removeNonTranslationalTransform","removedTransforms","scrollY","pageYOffset","convertedTarget","scrollTo","parseDomVariant","resolveCSSVariables","prefersReducedMotion","hasReducedMotionListener","featureNames","numFeatures","propEventHandlers","VisualElement","reducedMotionConfig","Map","valueSubscriptions","prevMotionValues","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","scheduleRender","baseTarget","initialValues","initialMotionValues","_props","_prevProps","removeFromVariantTree","addVariantChild","bindToMotionValue","initPrefersReducedMotion","matchMedia","motionMediaQuery","setReducedMotionPreferences","addListener","unmount","valueIsTransform","removeOnChange","latestValue","isTransformDirty","removeOnRenderRequest","other","sortInstanceNodePosition","loadFeatures","renderedProps","isStrict","preloadedFeatures","projectionId","ProjectionNodeConstructor","initialLayoutGroupConfig","features","createElement","layoutScroll","layoutRoot","setOptions","alwaysMeasureLayout","animationType","initialPromotionConfig","build","measureInstanceViewportBox","getStaticValue","canMutate","makeTargetAnimatableFromInstance","listener","updateMotionValuesFromProps","nextValue","prevValue","existingValue","removeValue","handleChildMotionValue","getVariant","getClosestVariantNode","startAtParent","numVariantProps","VisualElement_variantProps","closestVariantNode","removeValueFromRenderState","readValue","readValueFromInstance","setBaseTarget","valueFromInitial","getBaseTargetFromProps","args","DOMVisualElement","compareDocumentPosition","isMounted","getOrigin","transitionOrigin","getOriginFromTransition","checkTargetForNewValues","newValueKeys","numNewValues","targetValue","HTMLVisualElement","defaultType","computedStyle","childSubscription","textContent","SVGVisualElement","arguments","getAttribute","create_visual_element_createDomVisualElement","pixelsToPercent","pixels","correctBorderRadius","correct","node","varToken","correctBoxShadow","treeScale","projectionDelta","original","containsCSSVariables","cssVariables","shadow","xScale","yScale","averageScale","cssVariable","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","defaultScaleCorrectors","group","didUpdate","layoutDependency","willUpdate","promote","relegate","getStack","members","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","deregister","applyTo","boxShadow","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","relativeProgress","delta_remove_xKeys","delta_remove_yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEquals","aspectRatio","NodeStack","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","_e","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","elementScaleX","elementScaleY","compareByDepth","FlatTree","isDirty","transformAxes","create_projection_node_id","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","elementId","animationId","isTreeAnimating","isProjectionDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","path","registerPotentialNode","notifyListeners","subscriptionManager","hasListeners","SVGElement","cancelDelay","resizeUnblockUpdate","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","setAnimationOrigin","animationOptions","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","updateWasBlocked","clearMeasurements","mountNodeEarly","resetTransformStyle","notifyLayoutUpdate","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","measure","prevLayout","layoutCorrected","phase","needsMeasurement","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","nodeBox","setTargetDelta","targetDelta","getLead","attemptToResolveRelativeTarget","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isShared","canSkip","pendingAnimation","applyTreeDeltas","treePath","isSharedTransition","treeLength","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","mixTargetDelta","mixAxisDelta","mixAxis","mixValues","follow","opacityExit","borderLabel","followRadius","leadRadius","canMix","animate_animate","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","xLength","yLength","stack","shouldPreserveFollowOpacity","getPrevLead","hasRotate","resetValues","styles","visibility","pointerEvents","emptyStyles","valuesToRender","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","searchNode","searchElement","querySelector","DocumentProjectionNode","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode_HTMLProjectionNode","documentNode","position","featureBundle","motion","createMotionProxy","createConfig","customMotionComponentConfig","motion_createMotionComponent","createVisualElement","projectionNodeConstructor","useRender","ForwardRefComponent","forwardRef","externalRef","configAndProps","useLayoutId","layoutGroupId","useCreateMotionContext","getCurrentTreeVariants","useVisualElement","lazyContext","visualElementRef","renderer","presenceId","useAnimateChangesEffect","lazyStrictMode","Provider","Proxy","componentCache","_target","create_config_createDomMotionConfig","forwardMotionProps","baseConfig","createUseRender","useVisualProps","filteredProps","filterProps","isDom","elementProps","renderedChildren"],"sourceRoot":""}