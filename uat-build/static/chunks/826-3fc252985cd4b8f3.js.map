{"version":3,"file":"static/chunks/826-3fc252985cd4b8f3.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@tanstack/query-core/build/lib/focusManager.mjs","webpack://_N_E/./node_modules/@tanstack/query-core/build/lib/logger.mjs","webpack://_N_E/./node_modules/@tanstack/query-core/build/lib/mutation.mjs","webpack://_N_E/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs","webpack://_N_E/./node_modules/@tanstack/query-core/build/lib/onlineManager.mjs","webpack://_N_E/./node_modules/@tanstack/query-core/build/lib/removable.mjs","webpack://_N_E/./node_modules/@tanstack/query-core/build/lib/retryer.mjs","webpack://_N_E/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs","webpack://_N_E/./node_modules/@tanstack/query-core/build/lib/utils.mjs","webpack://_N_E/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs","webpack://_N_E/<anon>"],"sourcesContent":["import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nclass FocusManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus(); // Listen to visibillitychange and focus\n\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n\n  setFocused(focused) {\n    this.focused = focused;\n\n    if (focused) {\n      this.onFocus();\n    }\n  }\n\n  onFocus() {\n    this.listeners.forEach(({\n      listener\n    }) => {\n      listener();\n    });\n  }\n\n  isFocused() {\n    if (typeof this.focused === 'boolean') {\n      return this.focused;\n    } // document global can be unavailable in react native\n\n\n    if (typeof document === 'undefined') {\n      return true;\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n  }\n\n}\nconst focusManager = new FocusManager();\n\nexport { FocusManager, focusManager };\n//# sourceMappingURL=focusManager.mjs.map\n","const defaultLogger = console;\n\nexport { defaultLogger };\n//# sourceMappingURL=logger.mjs.map\n","import { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Removable } from './removable.mjs';\nimport { createRetryer, canFetch } from './retryer.mjs';\n\n// CLASS\nclass Mutation extends Removable {\n  constructor(config) {\n    super();\n    this.defaultOptions = config.defaultOptions;\n    this.mutationId = config.mutationId;\n    this.mutationCache = config.mutationCache;\n    this.logger = config.logger || defaultLogger;\n    this.observers = [];\n    this.state = config.state || getDefaultState();\n    this.setOptions(config.options);\n    this.scheduleGc();\n  }\n\n  setOptions(options) {\n    this.options = { ...this.defaultOptions,\n      ...options\n    };\n    this.updateCacheTime(this.options.cacheTime);\n  }\n\n  get meta() {\n    return this.options.meta;\n  }\n\n  setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state\n    });\n  }\n\n  addObserver(observer) {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer); // Stop the mutation from being garbage collected\n\n      this.clearGcTimeout();\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    this.observers = this.observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer\n    });\n  }\n\n  optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc();\n      } else {\n        this.mutationCache.remove(this);\n      }\n    }\n  }\n\n  continue() {\n    var _this$retryer$continu, _this$retryer;\n\n    return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();\n  }\n\n  async execute() {\n    const executeMutation = () => {\n      var _this$options$retry;\n\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found');\n          }\n\n          return this.options.mutationFn(this.state.variables);\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({\n            type: 'failed',\n            failureCount,\n            error\n          });\n        },\n        onPause: () => {\n          this.dispatch({\n            type: 'pause'\n          });\n        },\n        onContinue: () => {\n          this.dispatch({\n            type: 'continue'\n          });\n        },\n        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode\n      });\n      return this.retryer.promise;\n    };\n\n    const restored = this.state.status === 'loading';\n\n    try {\n      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;\n\n      if (!restored) {\n        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n\n        this.dispatch({\n          type: 'loading',\n          variables: this.options.variables\n        }); // Notify cache callback\n\n        await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));\n        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables\n          });\n        }\n      }\n\n      const data = await executeMutation(); // Notify cache callback\n\n      await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));\n      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context)); // Notify cache callback\n\n      await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this));\n      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n      this.dispatch({\n        type: 'success',\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;\n\n        // Notify cache callback\n        await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n\n        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context)); // Notify cache callback\n\n        await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, undefined, error, this.state.variables, this.state.context, this));\n        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n        throw error;\n      } finally {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n    }\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error\n          };\n\n        case 'pause':\n          return { ...state,\n            isPaused: true\n          };\n\n        case 'continue':\n          return { ...state,\n            isPaused: false\n          };\n\n        case 'loading':\n          return { ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false\n          };\n\n        case 'error':\n          return { ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error'\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\n\nexport { Mutation, getDefaultState };\n//# sourceMappingURL=mutation.mjs.map\n","import { scheduleMicrotask } from './utils.mjs';\n\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nconst notifyManager = createNotifyManager();\n\nexport { createNotifyManager, notifyManager };\n//# sourceMappingURL=notifyManager.mjs.map\n","import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nconst onlineEvents = ['online', 'offline'];\nclass OnlineManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n\n        onlineEvents.forEach(event => {\n          window.addEventListener(event, listener, false);\n        });\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          onlineEvents.forEach(event => {\n            window.removeEventListener(event, listener);\n          });\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n\n  setOnline(online) {\n    this.online = online;\n\n    if (online) {\n      this.onOnline();\n    }\n  }\n\n  onOnline() {\n    this.listeners.forEach(({\n      listener\n    }) => {\n      listener();\n    });\n  }\n\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n\n    return navigator.onLine;\n  }\n\n}\nconst onlineManager = new OnlineManager();\n\nexport { OnlineManager, onlineManager };\n//# sourceMappingURL=onlineManager.mjs.map\n","import { isValidTimeout, isServer } from './utils.mjs';\n\nclass Removable {\n  destroy() {\n    this.clearGcTimeout();\n  }\n\n  scheduleGc() {\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove();\n      }, this.cacheTime);\n    }\n  }\n\n  updateCacheTime(newCacheTime) {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1000);\n  }\n\n  clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout);\n      this.gcTimeout = undefined;\n    }\n  }\n\n}\n\nexport { Removable };\n//# sourceMappingURL=removable.mjs.map\n","import { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { sleep } from './utils.mjs';\n\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1000 * 2 ** failureCount, 30000);\n}\n\nfunction canFetch(networkMode) {\n  return (networkMode != null ? networkMode : 'online') === 'online' ? onlineManager.isOnline() : true;\n}\nclass CancelledError {\n  constructor(options) {\n    this.revert = options == null ? void 0 : options.revert;\n    this.silent = options == null ? void 0 : options.silent;\n  }\n\n}\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  let promiseResolve;\n  let promiseReject;\n  const promise = new Promise((outerResolve, outerReject) => {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort == null ? void 0 : config.abort();\n    }\n  };\n\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n\n  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== 'always' && !onlineManager.isOnline();\n\n  const resolve = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess == null ? void 0 : config.onSuccess(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseResolve(value);\n    }\n  };\n\n  const reject = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError == null ? void 0 : config.onError(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseReject(value);\n    }\n  };\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        const canContinue = isResolved || !shouldPause();\n\n        if (canContinue) {\n          continueResolve(value);\n        }\n\n        return canContinue;\n      };\n\n      config.onPause == null ? void 0 : config.onPause();\n    }).then(() => {\n      continueFn = undefined;\n\n      if (!isResolved) {\n        config.onContinue == null ? void 0 : config.onContinue();\n      }\n    });\n  }; // Create loop function\n\n\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return;\n    }\n\n    let promiseOrValue; // Execute query\n\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      var _config$retry, _config$retryDelay;\n\n      // Stop if the fetch is already resolved\n      if (isResolved) {\n        return;\n      } // Do we need to retry the request?\n\n\n      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n      const delay = typeof retryDelay === 'function' ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === 'number' && failureCount < retry || typeof retry === 'function' && retry(failureCount, error);\n\n      if (isRetryCancelled || !shouldRetry) {\n        // We are done if the query does not need to be retried\n        reject(error);\n        return;\n      }\n\n      failureCount++; // Notify on fail\n\n      config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n\n      sleep(delay) // Pause if the document is not visible or when the device is offline\n      .then(() => {\n        if (shouldPause()) {\n          return pause();\n        }\n\n        return;\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  }; // Start loop\n\n\n  if (canFetch(config.networkMode)) {\n    run();\n  } else {\n    pause().then(run);\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      const didContinue = continueFn == null ? void 0 : continueFn();\n      return didContinue ? promise : Promise.resolve();\n    },\n    cancelRetry,\n    continueRetry\n  };\n}\n\nexport { CancelledError, canFetch, createRetryer, isCancelledError };\n//# sourceMappingURL=retryer.mjs.map\n","class Subscribable {\n  constructor() {\n    this.listeners = new Set();\n    this.subscribe = this.subscribe.bind(this);\n  }\n\n  subscribe(listener) {\n    const identity = {\n      listener\n    };\n    this.listeners.add(identity);\n    this.onSubscribe();\n    return () => {\n      this.listeners.delete(identity);\n      this.onUnsubscribe();\n    };\n  }\n\n  hasListeners() {\n    return this.listeners.size > 0;\n  }\n\n  onSubscribe() {// Do nothing\n  }\n\n  onUnsubscribe() {// Do nothing\n  }\n\n}\n\nexport { Subscribable };\n//# sourceMappingURL=subscribable.mjs.map\n","// TYPES\n// UTILS\nconst isServer = typeof window === 'undefined' || 'Deno' in window;\nfunction noop() {\n  return undefined;\n}\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n  return typeof value === 'number' && value >= 0 && value !== Infinity;\n}\nfunction difference(array1, array2) {\n  return array1.filter(x => !array2.includes(x));\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3,\n      queryKey: arg1,\n      queryFn: arg2\n    };\n  }\n\n  return { ...arg2,\n    queryKey: arg1\n  };\n}\nfunction parseMutationArgs(arg1, arg2, arg3) {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3,\n        mutationKey: arg1,\n        mutationFn: arg2\n      };\n    }\n\n    return { ...arg2,\n      mutationKey: arg1\n    };\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2,\n      mutationFn: arg1\n    };\n  }\n\n  return { ...arg1\n  };\n}\nfunction parseFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    queryKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction parseMutationFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    mutationKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction matchQuery(filters, query) {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale\n  } = filters;\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false;\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false;\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive();\n\n    if (type === 'active' && !isActive) {\n      return false;\n    }\n\n    if (type === 'inactive' && isActive) {\n      return false;\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false;\n  }\n\n  if (typeof fetchStatus !== 'undefined' && fetchStatus !== query.state.fetchStatus) {\n    return false;\n  }\n\n  if (predicate && !predicate(query)) {\n    return false;\n  }\n\n  return true;\n}\nfunction matchMutation(filters, mutation) {\n  const {\n    exact,\n    fetching,\n    predicate,\n    mutationKey\n  } = filters;\n\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false;\n    }\n\n    if (exact) {\n      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {\n        return false;\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false;\n    }\n  }\n\n  if (typeof fetching === 'boolean' && mutation.state.status === 'loading' !== fetching) {\n    return false;\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false;\n  }\n\n  return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n  const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;\n  return hashFn(queryKey);\n}\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\n\nfunction hashQueryKey(queryKey) {\n  return JSON.stringify(queryKey, (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n    result[key] = val[key];\n    return result;\n  }, {}) : val);\n}\n/**\n * Checks if key `b` partially matches with key `a`.\n */\n\nfunction partialMatchKey(a, b) {\n  return partialDeepEqual(a, b);\n}\n/**\n * Checks if `b` partially matches with `a`.\n */\n\nfunction partialDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]));\n  }\n\n  return false;\n}\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\n\nfunction replaceEqualDeep(a, b) {\n  if (a === b) {\n    return a;\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b);\n\n  if (array || isPlainObject(a) && isPlainObject(b)) {\n    const aSize = array ? a.length : Object.keys(a).length;\n    const bItems = array ? b : Object.keys(b);\n    const bSize = bItems.length;\n    const copy = array ? [] : {};\n    let equalItems = 0;\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i];\n      copy[key] = replaceEqualDeep(a[key], b[key]);\n\n      if (copy[key] === a[key]) {\n        equalItems++;\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy;\n  }\n\n  return b;\n}\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\n\nfunction shallowEqualObjects(a, b) {\n  if (a && !b || b && !a) {\n    return false;\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nfunction isPlainArray(value) {\n  return Array.isArray(value) && value.length === Object.keys(value).length;\n} // Copied from: https://github.com/jonschlinkert/is-plain-object\n\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  } // If has modified constructor\n\n\n  const ctor = o.constructor;\n\n  if (typeof ctor === 'undefined') {\n    return true;\n  } // If has modified prototype\n\n\n  const prot = ctor.prototype;\n\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  } // If constructor does not have an Object-specific method\n\n\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false;\n  } // Most likely a plain Object\n\n\n  return true;\n}\n\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction isError(value) {\n  return value instanceof Error;\n}\nfunction sleep(timeout) {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n}\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\n\nfunction scheduleMicrotask(callback) {\n  sleep(0).then(callback);\n}\nfunction getAbortController() {\n  if (typeof AbortController === 'function') {\n    return new AbortController();\n  }\n\n  return;\n}\nfunction replaceData(prevData, data, options) {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {\n    return prevData;\n  } else if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data);\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data);\n  }\n\n  return data;\n}\n\nexport { difference, functionalUpdate, getAbortController, hashQueryKey, hashQueryKeyByOptions, isError, isPlainArray, isPlainObject, isQueryKey, isServer, isValidTimeout, matchMutation, matchQuery, noop, parseFilterArgs, parseMutationArgs, parseMutationFilterArgs, parseQueryArgs, partialDeepEqual, partialMatchKey, replaceAt, replaceData, replaceEqualDeep, scheduleMicrotask, shallowEqualObjects, sleep, timeUntilStale };\n//# sourceMappingURL=utils.mjs.map\n","import * as React from 'react';\n\nconst defaultContext = /*#__PURE__*/React.createContext(undefined);\nconst QueryClientSharingContext = /*#__PURE__*/React.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n\n    return window.ReactQueryClientContext;\n  }\n\n  return defaultContext;\n}\n\nconst useQueryClient = ({\n  context\n} = {}) => {\n  const queryClient = React.useContext(getQueryClientContext(context, React.useContext(QueryClientSharingContext)));\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n\n  return queryClient;\n};\nconst QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false\n}) => {\n  React.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n\n  if (process.env.NODE_ENV !== 'production' && contextSharing) {\n    client.getLogger().error(\"The contextSharing option has been deprecated and will be removed in the next major version\");\n  }\n\n  const Context = getQueryClientContext(context, contextSharing);\n  return /*#__PURE__*/React.createElement(QueryClientSharingContext.Provider, {\n    value: !context && contextSharing\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children));\n};\n\nexport { QueryClientProvider, defaultContext, useQueryClient };\n//# sourceMappingURL=QueryClientProvider.mjs.map\n"],"names":["FocusManager","_subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__","l","constructor","setup","onFocus","_utils_mjs__WEBPACK_IMPORTED_MODULE_1__","sk","window","addEventListener","listener","removeEventListener","onSubscribe","cleanup","setEventListener","onUnsubscribe","hasListeners","_this$cleanup","call","undefined","_this$cleanup2","focused","setFocused","listeners","forEach","isFocused","document","includes","visibilityState","focusManager","defaultLogger","console","Mutation","_removable_mjs__WEBPACK_IMPORTED_MODULE_0__","F","config","defaultOptions","mutationId","mutationCache","logger","_logger_mjs__WEBPACK_IMPORTED_MODULE_1__","_","observers","state","getDefaultState","setOptions","options","scheduleGc","updateCacheTime","cacheTime","meta","setState","dispatch","type","addObserver","observer","push","clearGcTimeout","notify","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","_this$retryer$continu","_this$retryer","retryer","execute","_this$mutationCache$c3","_this$mutationCache$c4","_this$options$onSucce","_this$options2","_this$mutationCache$c5","_this$mutationCache$c6","_this$options$onSettl","_this$options3","_this$mutationCache$c","_this$mutationCache$c2","_this$options$onMutat","_this$options","_this$mutationCache$c7","_this$mutationCache$c8","_this$options$onError","_this$options4","_this$mutationCache$c9","_this$mutationCache$c10","_this$options$onSettl2","_this$options5","restored","variables","onMutate","context","data","executeMutation","_this$options$retry","_retryer_mjs__WEBPACK_IMPORTED_MODULE_2__","Mz","fn","mutationFn","Promise","reject","onFail","failureCount","error","onPause","onContinue","retry","retryDelay","networkMode","promise","onSuccess","onSettled","onError","action","reducer","failureReason","isPaused","Kw","_notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__","V","batch","onMutationUpdate","notifyManager","createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","schedule","_utils_mjs__WEBPACK_IMPORTED_MODULE_0__","A4","flush","originalQueue","result","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","onlineEvents","OnlineManager","onOnline","event","online","setOnline","isOnline","navigator","onLine","onlineManager","Removable","destroy","PN","gcTimeout","setTimeout","newCacheTime","Math","max","Infinity","clearTimeout","defaultRetryDelay","min","canFetch","_onlineManager_mjs__WEBPACK_IMPORTED_MODULE_0__","N","CancelledError","revert","silent","isCancelledError","value","createRetryer","continueFn","promiseResolve","promiseReject","isRetryCancelled","isResolved","outerResolve","outerReject","shouldPause","_focusManager_mjs__WEBPACK_IMPORTED_MODULE_1__","j","resolve","pause","continueResolve","canContinue","then","run","promiseOrValue","catch","_config$retry","_config$retryDelay","delay","shouldRetry","_utils_mjs__WEBPACK_IMPORTED_MODULE_2__","Gh","cancel","cancelOptions","abort","didContinue","cancelRetry","continueRetry","Subscribable","Set","subscribe","bind","identity","add","delete","size","isServer","noop","functionalUpdate","updater","input","isValidTimeout","timeUntilStale","updatedAt","staleTime","Date","now","parseQueryArgs","arg1","arg2","arg3","queryKey","queryFn","parseMutationArgs","mutationKey","parseFilterArgs","isQueryKey","matchQuery","filters","query","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","partialDeepEqual","isActive","isStale","matchMutation","fetching","hashQueryKey","hashFn","queryKeyHashFn","JSON","stringify","val","isPlainObject","Object","keys","sort","reduce","key","partialMatchKey","a","b","some","shallowEqualObjects","isPlainArray","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","sleep","timeout","scheduleMicrotask","getAbortController","AbortController","replaceData","prevData","isDataEqual","structuralSharing","replaceEqualDeep","array","aSize","bItems","bSize","copy","equalItems","i","defaultContext","react__WEBPACK_IMPORTED_MODULE_0__","createContext","QueryClientSharingContext","getQueryClientContext","contextSharing","ReactQueryClientContext","useQueryClient","queryClient","useContext","QueryClientProvider","client","children","useEffect","mount","unmount","Context","createElement","Provider"],"sourceRoot":""}